last class we looked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree what the height	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
height of these things	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
continue with our discussion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree walk or tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
walk or tree traversals	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversals so a tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes of a tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visit process each node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
children okay ill show	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
show you soon examples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
clearer in a post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
process all the children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
children s or visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
visit all the children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node okay so lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
examples preorder tree walks	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
book or a paper	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
construct a tree out	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out of it tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
organization of a book	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
book as a tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree so or lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets says the title	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
section is the abstract	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two such sub sections	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
section “ one point	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99814126394	6.0	False
two has three sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
section three two sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
start reading the paper	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
paper when you read	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right suppose your reading	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reading the paper end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
paper end to end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
title read the abstract	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
section one section sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
listing as the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
contents of the book	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
listed the um sections	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sections within the chapter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
chapter then the sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
referring to our accessing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
accessing is this node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten then eleven twelve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
twelve thirteen then fourteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of a tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tree right and pseudo	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right and pseudo code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pseudo code for pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
code for pre order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of an node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree so to begin	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal at the root	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first visit the node	0.3555555556	0.0	0.0	0.0	0.0	0.0	3.99628252788	12.0	False
out the the book	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print the title print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
title print the heading	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print the heading print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
heading print the title	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
title of that node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so for instance	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
instance each node corresponds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
corresponds to a section	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
correspond to same print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
children nodes and repeat	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
repeat this same process	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right because this tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
subsection “ one point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point two “ right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visit all its children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
children of that node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means visit this node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node this corresponds visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
corresponds visit this node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node and then visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing visit its children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
whats called a post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal in a post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
post order traversal recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first visit its children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
grades within this sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
files within this sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure okay now suppose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the total space	0.3054082715	0.0	0.0	0.0	0.0	0.0	15.9944237918	18.0	False
occupied by this file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
occupied by this subdirectory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
obtain the total spaces	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
computation on this node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node after having done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
computation at two children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes after having computed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
required by the sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
computed total spaces required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right in a post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
child of the node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
traversal of a node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first going to perform	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
perform a post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
post order here corresponds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
finding the total spaces	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
occupied by that sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
directory so to compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total space is occupied	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
occupied by this directory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
first going to compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
occupied by this sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
directory and having computed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
required by this directory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
order in which computation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right and in fact	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
disk usage command unix	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
command in a directory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type the disk usage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
command in the sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first going to list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out the total spaces	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
occupied in this directory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
directory then the total	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eventually at the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
question is which child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hood would we visited	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first child second child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first child is visited	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
drawn the the trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
leftmost child is visited	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visit the childrens nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
childrens nodes in postorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes in postorder visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
postorder visit the children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
children node then visits	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visits the nodes lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case of binary tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visit to be visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal on the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99814126394	6.0	False
traversal on the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
right child so note	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right we are calling	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order within the procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing a preorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child and another right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right child the difference	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
difference between pre order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pre order and post	0.4456824513	0.0	0.0	0.0	0.0	0.0	4.99690210657	10.0	False
order and post order	0.4456824513	0.0	0.0	0.0	0.0	0.0	4.99690210657	10.0	False
order traversal on left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal on left child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eventually you do visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of this tree	0.5333333333	0.0	0.0	0.0	0.0	0.0	1.99752168525	8.0	False
doing when you visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
printing out the contents	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
contents of the node	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99814126394	6.0	False
node right so lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first look at pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first thing get printed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
printed we are doing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing a pre order	0.2280285036	0.0	0.0	0.0	0.0	0.0	7.99442379182	18.0	False
pre order traversal left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
order traversal left sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
traversal left sub tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
traversal of the left	0.3214611872	0.0	0.0	0.0	0.0	0.0	5.99318463445	22.0	False
root of the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tree and first print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first print the node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visit the node visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
visit corresponds to printing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left sub tree left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sub tree left sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree left sub tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
root node first visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node visit the node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node here means printing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
contents we will print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree but its left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done with the preorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of this guy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
order traversal of right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
traversal of right sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.998141263941	6.0	False
sub tree which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
means that first visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done with the pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99814126394	6.0	False
traversal of this sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done with a pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99814126394	6.0	False
tree we are done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of the right	0.4444444444	0.0	0.0	0.0	0.0	0.0	5.99504337051	16.0	False
sub tree right sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tree right sub tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
lets do a post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done post order traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first do a post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of its left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of its right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done with the post	0.0000000000	0.0	0.0	0.0	0.0	0.0	5.99814126394	6.0	False
first do the post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of this left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sub tree then post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree then post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of this right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tree and then print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
content so post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done the post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
done with post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree do the post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal here which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal here we done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus so in essence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute what the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
value of this quantity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of this expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression this sub expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression yeah this corresponds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
corresponds to sub expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of this sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
expression right whatever values	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value the entire thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sitting in this node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of this left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of this right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return the variable stored	0.0000000000	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	2.0	False
value the leaf corresponds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
leaf corresponds to numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers in this expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
leaf then that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first evaluate the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluate v dot left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left child this arrow	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
direction so x lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of right child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right when i evaluate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluate on the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order traversal small modification	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal small modification question	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem so the problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
incorporate the priority rules	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rules to be generated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generated such a tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluate the tree expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
correspond to this tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal we seen inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inorder traversal pre order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal pre order traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order traversal and post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal and post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order kind of traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall that pre order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order traversal we visited	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right then we visited	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
possibilities we just visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node between the visits	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visits to the left	0.0000000000	0.0161290322581	0.0	0.0	0.0	3	2.99814126394	6.0	False
left and the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99814126394	6.0	False
left and right sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99814126394	6.0	False
sub tree so pseudo	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree so pseudo code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pseudo code for inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
code for inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first do an inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99814126394	6.0	False
inorder on the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child then we visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inorder traversal right child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
possibilities these are threes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node either you visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visit both the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
right or you visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
guy of this left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left then the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node so it corresponds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thing we ill print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right sub tree inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sub tree inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inorder traversal of right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eventually we will print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression and this tours	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so we start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal of binary tree	0.0000000000	0.161290322581	0.0	0.428635883211	0.0	2	1.99814126394	6.0	False
pre post that inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
post that inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
special cases of eulers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cases of eulers rule	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so each node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
basically getting visited thrice	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
touching this node lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so three times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
qualify every internal node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
internal node of degree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
children if the node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression this is tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree corresponding to set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set an arithmetic expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print this arithmetic expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression out with parenthesis	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
draw the parenthesis print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out in this manner	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
euler walk this thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
start on the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
sub tree ill print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print an left bracket	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree when i finish	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
finish with the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree and ill print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print the right bracket	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
bracket right this corresponds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node ill just print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall that every node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node was visited thrice	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
essentially print the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
content of this node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left so ill print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node on the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	5.99814126394	6.0	False
print other left bracket	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left bracket i touch	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
print another left bracket	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four bracket to begin	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
leaf ill just print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
content of the leaf	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
star or a multiplication	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left print a left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print a left bracket	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out the arithmetic expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
arithmetic expression some kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of euler walk	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
walk on this tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right a generic method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generic method for tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method for tree traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal and then specialized	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pre order or post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order or post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
post order inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method called external right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right you not done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
external is a method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
invoke if the node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
invoke when you visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node from the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method here you continue	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
continue with the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child when you touch	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method then you continue	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
continue with right child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right you will invoke	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
methods you can create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create you can create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
choice you can specialize	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specialize this binary tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal the generic tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
abstract class which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that these methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
external left below right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right these are left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
leave certain methods unspecified	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object of that class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point specify those methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
manner create a sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create a sub class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sub class sub class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class of this class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specializes this generic tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generic tree traversal procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
left below and right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class for printing out	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
printing out arithmetic expressions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
back from the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute a certain result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
utilize used for instance	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
occupied by that directory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so we compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the space required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
left the left child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
directory in the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child compute the space	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
required by the directory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stored in r dot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left result r dot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specialize this our printing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression example so recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node is a leaf	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
content of that node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print out the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
element in that node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node from a left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print out a left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out a left bracket	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print out the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left then we touch	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing when we touch	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print out the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out the right bracket	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
methods in this manner	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
manner this becomes print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class which is extending	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
extending binary tree traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
invoke the traversal method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expressions with the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression it will print	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression in the parenthesis	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specialized the same class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class binary tree traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
occupied by the files	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
files by certain directories	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure right by specializing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets continue our discussion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pre and in order	0.0000000000	0.129032258065	0.0	0.387096774194	0.0	2	0.0	4.0	False
pre pre order inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pre order inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
right i have mention	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
figure out the trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal this was inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node for the root	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree of a right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order of the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
note that the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree has five elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
correspond to the pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pre order pre order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
order pre order traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree so in essence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
essence what have manage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
identify what the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pre order and inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
order and inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tree so my problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
work on this problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree the rep order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rep order inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out what the tree	0.2962962963	0.0	0.0	0.0	0.0	0.0	7.99690210657	10.0	False
root of this left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order traversal and inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal and inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes the right sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree is three nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes so the problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reduce to this problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out about the trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
user yeah the pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute not the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
simple if you compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order traversal this tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
flag out an error	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
error if the sequences	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
possibly d the rep	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rep and inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right suppose i gave	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
gave you the post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
post order in order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out where the root	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right in the pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order very first element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element is the root	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
root in a post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order the last element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search for the root	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
root in your inorder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal and wherever find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
root that neatly divides	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
neatly divides the thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree and right sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree what the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes in the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tree you can figure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out what the post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes of your post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recursive we ill figure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
figure what the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
trees and then plugged	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
post and in order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
whats the third question	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pre and post order	0.2622950820	0.0	0.0	0.0	0.0	0.0	9.99628252788	12.0	False
uniquely determine the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tree and the reason	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal and this post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal right three nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree this pre order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree also has pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pre order traversal post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order traversal post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal post order traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
trees that you concerned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem given a pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes in the tress	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child suppose i gave	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
gave you this information	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
internal node the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree has two children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
complete every internal node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node of the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node has two children	0.0000000000	0.0	0.0	0.0	0.0	0.0	3.99814126394	6.0	False
tree every internal node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
node having two children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node has binary tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
post order to determine	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
uniquely again and lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so i gave	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
gave you the pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
whats the first thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quickly draw the root	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child because every node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node ahs two children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
basically the it means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child and the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visits post order traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left has the pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right no right child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child is d draw	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child so every thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visited the other elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree so the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree only one elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
figure out the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out the left sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means is the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree only one node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node it is left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
high level in fact	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class right the code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
translate in to code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithms you should learn	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
questions till this point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
write down the code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal can i figure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes in one line	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of different combinations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
knowledge of one traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
similarly for post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
similarly for in order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give the inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
trees same inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suffices for most purposes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two does nt suffices	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
order and the post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal in which case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree some internal nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sufficient right more questions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find how many tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of binary trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say pre order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two to the power	0.2051282051	0.0	0.0	0.0	0.0	0.0	7.99752168525	8.0	False
binary tree right wee	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right of its parent	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child of its parent	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
finitely many different trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
trees with six nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the close form	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stop today s class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
traversals how to traverse	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ways of traversing trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
trees um in order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal for binary trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
trees there is notion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
notion of inorder traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
right as perhaps understand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversal for general trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node has three children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visiting the first child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child or after visiting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
visiting the second child	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left in a right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left then you visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node then you visit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
notion of n order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order pre order post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pre order post order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order post order traversal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two of these traversals	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traversals you can figure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree was which gave	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
raise to those traversals	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree walk or traversal	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
nodes in a tree	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
preorder tree walk processes	0.0	0.0322580645161	0.0	0.0322580645161	0.0	3	0.0	0.0	False
walk processes each node	0.0	0.0645161290323	0.0	0.129032258065	0.0	3	0.0	0.0	False
postorder tree walk processes	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
usage command in unix	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
left ad right sub	0.0	0.0161290322581	0.0	0.0	0.0	3	0.0	0.0	False
traversal of a binary	0.0	0.0322580645161	0.0	0.0161290322581	0.0	1	0.0	0.0	False
preorder inorder and postorder	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
inorder and postorder traversal	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
postorder traversal are special	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
cases of the euler	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
walk around the tree	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
printing an arithmetic expression	0.0	0.129032258065	0.0	0.290322580645	0.0	2	0.0	0.0	False
traversing the left sub	0.0	0.0483870967742	0.0	0.0766917339059	0.0	3	0.0	0.0	False
traverse the right sub	0.0	0.0483870967742	0.0	0.0766917339059	0.0	3	0.0	0.0	False
specializing generic binary tree	0.0	0.0322580645161	0.0	0.0322580645161	0.0	2	0.0	0.0	False
generic binary tree traversal	0.0	0.0322580645161	0.0	0.0322580645161	0.0	2	0.0	0.0	False
public class printexpressiontraversal extends	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
protected void external position	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
external position p traversalresult	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
out print p element	0.0	0.0645161290323	0.0	0.129032258065	0.0	1	0.0	0.0	False
protected void left position	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
left position p traversalresult	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
protected void right position	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
right position p traversalresult	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
building tree from pre	0.0	0.129032258065	0.0	0.387096774194	0.0	2	0.0	0.0	False
inorder traversals of binary	0.0	0.129032258065	0.0	0.387096774194	0.0	1	0.0	0.0	False
tree we can uniquely	0.0	0.129032258065	0.0	0.387096774194	0.0	1	0.0	0.0	False
building tree from post	0.0	0.0161290322581	0.0	0.0	0.0	2	0.0	0.0	False
vidited in the postorder	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
traversal is the root	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
root of the binary	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
inorder traversal to identify	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
procedure is a similar	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
obtaining tree from preorder	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
insufticiency of pre postorder	0.0	0.0161290322581	0.0	0.0	0.0	2	0.0	0.0	False
pre and postorder traversal	0.0	0.0322580645161	0.0	0.0322580645161	0.0	1	0.0	0.0	False
tree we cannot uniquely	0.0	0.0161290322581	0.0	0.0	0.0	1	0.0	0.0	False
tree at least two	0.0	0.145161290323	0.0	0.460150403435	0.0	1	0.0	0.0	False
children then the tree	0.0	0.145161290323	0.0	0.460150403435	0.0	1	0.0	0.0	False
