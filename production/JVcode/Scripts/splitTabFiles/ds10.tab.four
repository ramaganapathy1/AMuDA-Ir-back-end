talking about quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithm we are discussing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
discussing in the series	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first one was insertion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
argued a worst case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
running time of order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
today the quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick algorithm in practice	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constants the another property	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
property of this algorithm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorting algorithm an algorithm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
place sort in place	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
require any additional memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assume that the numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array the n numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort a large collection	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
large collection of numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
divide and conquer algorithms	0.0000000000	0.0416666666667	0.0	0.0	0.0	1	0.0	4.0	False
high level the idea	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two or more pieces	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case of quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
chose the n numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call the lower part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call the higher part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
higher part the property	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lower part every number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort the lower part	0.0000000000	0.0	0.0	0.0	0.0	0.0	1.99847638395	6.0	False
sort the higher part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
part and i put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire thing is sorted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
sorted rite i sorted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lower part is sorted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
higher part every elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first how this partition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure so the partitioning	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements as a pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
smaller than the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lower half lower part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
part of the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
larger than the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure to the partitioning	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
limits of the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
refers to this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
location and r refers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
partitions the sub array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
start in the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array the sub array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means we just continue	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop till you break	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out to the loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten so keep decrementing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations which has counting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reached such a location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location so i stopped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop where am incrementing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exchange ai aj means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
contents rite is ort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
blue i will denote	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left part and orange	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten so i found	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
found find an element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
things ya i stopped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
moving till i find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
ten at this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nineteen ya i swap	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
decrementing till i find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten j is searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
incrementing till i find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exit return the procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returning we are returning	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left half my left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
half my left half	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dos this procedure takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
clear that its taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
step we are decrementing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
decremented utmost ten times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten times the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
array so this loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop is done utmost	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
done utmost n times	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
pivot and saying compare	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element with the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
back into this place	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements in this array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
partitioning in in place	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory and in linear	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
group inside by taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inside by taking order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order n and wait	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total number of times	0.4166666667	0.0	0.0	0.0	0.0	0.0	4.99796851193	8.0	False
times is this statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
executed utmost n times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop i might decrement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
executed and this step	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
complete quick sort algorithm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick sort on lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say this array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array a between limits	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
initial call for quick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call for quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt make any sense	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
first find the partition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
partition of this part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
invoke the previous procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of the sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
returns the demarcating lines	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort the lower half	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recursively invoke quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means just keep doing	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
doing the while loop	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
stops when you return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop like a break	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt have to copy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
copies of the variables	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
space that is created	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
created on this track	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking any additional memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
memory for the variab	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variab for the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sir in quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number than a fixed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element should be partitioned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pivot element you partitioned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array around the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort this left half	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
half let me sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort this right half	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
notion of a left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
half and a right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
write a quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure in this manner	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
limits of the sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
partition procedure takes order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
takes order n times	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99847638395	6.0	False
order n times linear	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick sort will depend	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left half but left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
half but left part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick sort is taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort is taking lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
halves ya which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that i started	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements were less half	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
half and half elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lucky again i picked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
divided up the thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lucky i it happened	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two parts equal parts	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lucky at every step	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of this array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two into two parts	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort into two parts	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effect in each level	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
level of this tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
drawn in this manner	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
manner am taking order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eventually you will end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log n such levels	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lucky i am naveen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
naveen rite which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sir in this sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times i will increase	0.0000000000	0.0	0.0	0.0	0.0	0.0	5.99847638395	6.0	False
increase i or decrease	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten rite total number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times so the sum	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times so which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constant time some theta	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
send the quality good	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element the other side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side gets n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
writing the recurrence relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation time to quick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick sort n elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort n elements equals	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure was quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick sort the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort the left part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part has one element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick sort the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort the right part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part which was lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
recurrence and lets solve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets solve this recurrence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus one plus theta	0.0000000000	0.0	0.0	0.0	0.0	0.0	5.99847638395	6.0	False
theta of n wait	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus two plus theta	0.0000000000	0.0	0.0	0.0	0.0	0.0	5.99847638395	6.0	False
theta of n minus	0.1459854015	0.0	0.0	0.0	0.0	0.0	11.9969527679	12.0	False
minus three plus theta	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
two plus this term	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus four plus theta	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
theta of n squared	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
squared ya n squared	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bothering you just replace	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
half and half split	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
simple skewed split split	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus one n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
minus two n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
height of this tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
makes it n squared	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose we were doing	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
doing a following scheme	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
element as the pivot	0.3111909037	0.0	0.0	0.0	0.0	0.0	5.99339766379	26.0	False
lets say in increasing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element in my upper	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
divided in this manner	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
worst case would happen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
happen when the input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
input is already sorted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorted in ascending order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order or in descending	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order even in descending	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element in right half	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happen rite similar kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of a thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thing happened in insertion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happened in insertion sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort if you remember	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall in insertion sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort we were taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out the best place	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find the best place	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorted in decreasing order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
front of the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
array at every step	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
squared but in insertion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort if the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorted in increasing order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt have to move	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
comparison with insertion sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorted increasing sorted decreasing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
decreasing you might end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case seems to app	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
half at every step	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tenth that is ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
percent of the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
side and ninety percent	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose this was happening	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happening at every stage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements on one side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tenth on one side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side and nine tenth	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99847638395	6.0	False
side one tenth means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means n by hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hundred on one side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten on one side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tenths of this guy	0.0000000000	0.0	0.0	0.0	0.0	0.0	4.99847638395	6.0	False
ten number of elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out what the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number at this step	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
guy at this step	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number at every level	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
decreasing by a factor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten how many times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times can i decrease	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
utmost to the log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
decrementing by a factor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
factor of nine tens	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tens at every step	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
decreasing decrementing by half	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
work out the map	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constant its different constant	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
height is order log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
level we are taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sir moving the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
providing an upper bound	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strange manner one tenth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tenth and nine tenth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirty six by thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constant fraction of numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
side a constant fraction	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side we cant afford	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constant fraction one tenth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tenth or one hundredth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hundredth or one thousandth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
formal analysis from starting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lucky and unlucky cases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lucky case n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two and n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
two on one side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side actually i managed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two n times log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log n such thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets try and prove	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case that we expect	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
word expected time expected	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find a median element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
median as the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
break up my array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers and then find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find the median element	0.0000000000	0.0	0.0	0.0	0.0	0.0	1.99847638395	6.0	False
strategy except the sorting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
place ya so finding	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of small array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
small array then find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find the then sorting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute a median element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
median element in linear	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fairly a involved procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick a random element	0.2597402597	0.0	0.0	0.0	0.0	0.0	5.9969527679	12.0	False
random element and declare	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element as our pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt want top pick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
pick a specific element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick the last element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say in decreasing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
decreasing order or increasing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order or increasing order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order then am struck	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
struck i will struck	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call a randomized algorithm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
randomized algorithm an algorithm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
basically making some kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of random choices	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
analyze what this algorithm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithm in a minute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
partition around a random	0.0000000000	0.0833333333333	0.0	0.0833333333333	0.0	1	0.0	2.0	False
random element a pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pivot is a random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element we just pick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probability so what kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kinds of different splits	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two n n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probability of these splits	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random element each element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element can be picked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
picked with equal probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements and i pick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
versus n minus ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
split or a ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten versus n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element rite the probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tool for designing algorithms	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
randomize the partition procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
partition procedure and call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call it randomized partition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
partition the a array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sub array between locations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generates a random number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say that number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
procedure if you recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking the last element	0.0000000000	0.0	0.0	0.0	0.0	0.0	1.99847638395	6.0	False
exchange the pivot element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call my partition procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure the same partition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort do now randomized	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
calling partition it calls	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
partition it calls randomized	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
randomized partition the rest	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pivot we just pick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
difference between a random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
input which is lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say increasing order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element we are picking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random element to partition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
partition when i pick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorted sequence as input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
squared time in fact	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
run the same algorithm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithm and it takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
depends upon what random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random numbers are selected	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
selected and those random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random numbers selected decide	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
selected decide the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pivot and the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bad ones fairly skewed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
average we are doing	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
sequence of random numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random numbers is generated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generated in some sense	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
input we will run	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
run the algorithm today	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithm today and tomorrow	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expected time for sorting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorting that specific input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
denote the expected number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expected number of comparisons	0.4166666667	0.0	0.0	0.0	0.0	0.0	2.99796851193	8.0	False
number of comparisons required	0.3738317757	0.0833333333333	0.0	0.0833333333333	0.0	1	3.99746063992	10.0	False
required by quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
comparisons required to sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depend upon the depend	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers you have depend	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort does quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick sort first partitions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
matter what the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
require the same number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
process as every number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compared against the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
pivot yes every number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put on one side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side how many elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side and n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element is already lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort those i minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
sort those n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements how much expected	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking to quick sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	5.99847638395	6.0	False
minus n one elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort the n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fact that the pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirteen plus n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
basically then the sum	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sum rite this quantity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
summed over all choices	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
picked with the probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
instance just to give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give you an examples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equally likely each occurs	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
occurs with the probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two with the probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dice so each appears	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expected value so expectation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variable is the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
number on the dice	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dice rite this random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random variable lets call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
takes six different values	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value take the probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dice and keep recording	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dice one billion times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
billion by six times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probability means the probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
experiment sufficiently many times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times the this fraction	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fraction of the times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sum of the outcomes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sum how many times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probability of the event	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
written it as probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variable takes the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of the random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variable plus the probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probability that it takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
value two so probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random variable is taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set of discrete values	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
takes the value times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value times the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times the value summed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
choices is the expectation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expectation of the random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
revert to our slides	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value with the probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done just the probability	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
probability times the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of the sum	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
summing it n times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times and then dividing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recurrence for the expected	0.0000000000	0.0416666666667	0.0	0.0	0.0	1	0.0	2.0	False
comparisons required to insert	0.0000000000	0.0416666666667	0.0	0.0	0.0	1	0.0	2.0	False
insert a randomly chosen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
permutation of n elements	0.0000000000	0.0416666666667	0.0	0.0	0.0	1	0.0	2.0	False
last class we solved	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recurrence and we showed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
solution is n log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log n hence expected	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
comparisons required by randomized	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort is n log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recurrence ya we solved	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
questions till this point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick sort so lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quick sort worst case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log n we dint	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
intuitively you can understand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case time n log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element i was inserting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
depends upon the numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random numbers were generated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generated rite the running	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give you i fix	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tomorrow because the random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
today we will compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute what the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tomorrow we will compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
essentially we are doing	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
input and i compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
matter what the input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
input is your expected	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expected time is turning	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
running time would depend	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
depend upon what input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
randomly pick my pivot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick my pivot element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depend upon my input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
input is it depends	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expectation is will give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give me a running	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt make any fix	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
make any fix element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
independent upon the input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
sequence rite no matter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expectation is n log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log n which quit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quit often will turn	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
independent of the input	0.0000000000	0.0416666666667	0.0	0.0	0.0	1	0.0	2.0	False
input then this kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind we are making	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
makes sense to design	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithm for those kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sequence or specific times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specific times of input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inputs and in doing	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
class for binary search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree we were doing	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
today or you run	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random choices being made	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
matter when you run	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
average over all input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call an average case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
analysis rite we looked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inputs possible we looked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
randomized algorithm our algorithm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking different times depending	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers were and today	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
today we were taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
average over the random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end today s lecture	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
analyze the the expected	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
analysis for randomized quick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorts almost in "place,"	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
practical average sort performance	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
log n with small	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
constant factors but worst	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
quick sort the principle	0.0	0.0416666666667	0.0	0.0	0.0	3	0.0	0.0	False
understand quick sort lets	0.0	0.0416666666667	0.0	0.0	0.0	3	0.0	0.0	False
description of the algorithm	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
elements in the lower	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
combine trivial since sorting	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
linear time partitioning procedure	0.0	0.0833333333333	0.0	0.0416666666667	0.0	1	0.0	0.0	False
assume that all input	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
input elements are distinct	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
depends on the distribution	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
partition splits the array	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
splits the array evenly	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
side of the partition	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
recurrence for the worst	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
yields the best case	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
partition around the middle	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
running time is independent	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
specific input triggers worst	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
input triggers worst case	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
triggers worst case behavior	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
case is only determined	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
determined by the output	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
equally likely with probability	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
randomization is a general	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
general tool to improve	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
algorithms with bad worst	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
worst case but good	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
comparisons needed to quick	0.0	0.0833333333333	0.0	0.0833333333333	0.0	3	0.0	0.0	False
needed to quick sort	0.0	0.0833333333333	0.0	0.0833333333333	0.0	3	0.0	0.0	False
quick sort n numbers	0.0	0.0833333333333	0.0	0.0833333333333	0.0	3	0.0	0.0	False
split occurs with probability	0.0	0.0833333333333	0.0	0.0833333333333	0.0	1	0.0	0.0	False
exepected number of comparisons	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
required by randomized quicksort	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
randomized ouicksort running times	0.0	0.0416666666667	0.0	0.0	0.0	2	0.0	0.0	False
running time of quicksort	0.0	0.166666666667	0.0	0.333333333333	0.0	1	0.0	0.0	False
quicksort does not depend	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
depends on the random	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
provided by the generator	0.0	0.0833333333333	0.0	0.0833333333333	0.0	1	0.0	0.0	False
give us the expected	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
random number sequences provided	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
creating a binary search	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
running time does depend	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
order of the elements	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
insertion did not employ	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
input order the algorithm	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
order the algorithm takes	0.0	0.0416666666667	0.0	0.0	0.0	1	0.0	0.0	False
