query processing and optimization	0.0000000000	0.0	0.0	0.0	0.0	0.0	1.99823840282	6.0	False
session in database management	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talking about a storage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
storage structures and index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structures and index structures	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index structures we talked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
challenge facing a databases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
databases such as yesterday	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
challenges is no longer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem of storing data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data or of designing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
designing that can store	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger and larger amount	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger amount of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
huge amounts of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
amounts of data devices	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put in your pockets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
wear inside your watches	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
storage of data storage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data storage of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
area required for storing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
required for storing data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
shrunk in tremendous proportions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
proportions and the cost	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cost of storing data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data is also fallen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tremendously over the years	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
years however this fall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cost or this affordability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
affordability of massive amounts	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
massive amounts of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
amounts of data storage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data storage has resulted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
efficiently can we retrieve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
databases has been changing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
changing over the years	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
today in um ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ago very large databases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
meant hundreds of mega	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hundreds of mega bytes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mega bytes of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
giga bytes of data	0.2214983713	0.0	0.0	0.0	0.0	0.0	8.99530240752	16.0	False
today when we talk	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
easily into peta bytes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
peta bytes of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bytes of data ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data ten power fifteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten power fifteen bytes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fifteen bytes of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
files those are files	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query to quickly retrieve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quickly retrieve the required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
retrieve the required data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
required data elements form	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements form the database	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
aspect of the story	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
story um using index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element in effective retrieval	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effective retrieval of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
usability and um unusablity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
unusablity of a database	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategies or the query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query execution and optimization	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
execution and optimization strategies	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
topic of this session	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
important aspect of database	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
aspect of database management	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query execution um strategy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
retrieve a data element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element that can make	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
back after two days	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
makes up a query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query execution and query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
execution and query processing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
query processing or efficient	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
processing or efficient query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effective operations of database	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
database can be rendered	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
good query execution strategies	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class pc s today	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
today we have data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mega bit one mega	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bit one mega bytes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scan through a relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
query that select query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query which which requires	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
requires me to scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation of one giga	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scan the entire relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
bad query execution plan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute a cartesian product	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return the um return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
results that we required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the cartesian product	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
product of one giga	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bytes of data times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data times one giga	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times one giga bytes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data where each axis	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
axis of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
seconds just to compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute this cartesian product	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
response time is concerned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
concerned therefore efficient query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rehash a given query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of an equi	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depends on a variety	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
factors that affect query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
storage media is fragmented	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
defragmented if the storage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
remember what is meant	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
meant by fragmented storage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fragmented storage contiguous block	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
belong to different files	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
response to a select	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
considerably for this query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
affect queries or query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
queries or query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
control of the dbms	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
purely outside the control	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kinds of database management	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
management systems would override	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
override the operating system	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
operating system um override	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mechanisms and then start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create their own file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
system that can ensure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
system is never defragmented	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
defragmented is never fragmented	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
high end database management	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end database management systems	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
overrule the the underlying	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hardware directly in order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
speed up query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
speed up or decrease	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
earlier insufficient or incorrect	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insufficient or incorrect information	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
incorrect information about factors	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query plans can lead	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query execution plan estimates	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
estimates that the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kilobytes but the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bytes then whatever execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kilobytes will not work	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stored in main memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
catalogs in more detail	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
factors or several infor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
information about the database	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
include the the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table size in terms	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
terms of um tuples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuples or the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
estimate of the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
number of distinct values	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
values in a tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
indexes for example query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query catalogs hence play	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
crucial roll in deciding	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
deciding the query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
process or query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
execution process or query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
process or query processing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query processing um process	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
steps in a query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query execution um process	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
similar to the execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
steps in typical compiler	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
high level language construct	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
language construct into machine	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
construct into machine language	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
machine language and executes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
start with the user	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
description of the sql	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sql query the sql	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query the sql query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query is then read	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read by a query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query complier that performs	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
complier that performs scanning	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lexical analysis is performed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sql query is read	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query is read character	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read character by character	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
character and then tokens	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out of the characters	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parser which in turn	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
turn parses the query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parses the query constructs	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query constructs a syntax	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constructs a syntax tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
validated for semantic checks	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
checks for for types	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done an intermediate form	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
form of the query	0.2896081772	0.0	0.0	0.0	0.0	0.0	4.9970640047	10.0	False
query is is generated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
logical query plan tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
plan tree this intermediate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree this intermediate form	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
representation of the sql	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query tree is generated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
heuristics and cost based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rewrite this query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
execution tree in order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
optimal or in order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query for whatever execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query has been requested	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
requested by the user	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
optimizer which in turn	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
turn generates the query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generates the query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
final physical query plan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
physical query plan tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
plan tree is created	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
heuristics based optimization strategy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kinds of thumb rules	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategies for for query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cost based optimization strategies	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
estimate of the cost	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cost that is required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
execute one query plan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order to um utilize	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
potentially the best query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
physically query execution plan	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	4.0	False
execution plan is written	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
necessarily the machine language	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performed on the storage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
files that are stored	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
disks the query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generator which either executes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interpreted mode of query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mode of query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99823840282	6.0	False
execution or it generates	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
complied mode of query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations required to answer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
code um the machine	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
code that is generated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
run time database processor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
database processor which executes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returns the query results	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
steps of query executions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query executions two aspects	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
plan the intermediate form	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query as we mentioned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equivalent of the sql	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query that the user	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
form of tree structure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree where relational algebra	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
domains form the leaf	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
form the leaf nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relations on which query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query is are executed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
executed from the leaf	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
leaf nodes the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
based on a set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
rules that are derived	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
derived from either heuristics	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
heuristics or cost based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generate generate an equivalent	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generate an equivalent tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equivalent tree which produces	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
produces the same query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
overheads the physical query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query plan is written	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
complied into machine code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
physical um query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
plan the logical form	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
logical query execution plan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
detail in later session	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
physical query plan comprises	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
basic set of operators	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
language of physical query	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
operators of relational algebra	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relational algebra says select	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
select on this condition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
support um an operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
select a particular tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuples on this condition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
condition however on addition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tables and um iterating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation of the database	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
candidate physical query plan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
physical query plan operators	0.0000000000	0.0967741935484	0.0	0.102255645208	0.0	2	2.99823840282	6.0	False
operator a table scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suggests just simply scans	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returns an entire relation	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
operator can be parameterized	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parameterized in the sense	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
conditions to the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scan operator that scans	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scans a given relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation r and returns	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returns only those tuples	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
satisfy the given condition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations that are performed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performed by table scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scan is to read	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read all blocks note	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
blocks note that blocks	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scan contains a code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator for table scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table scan contains code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
code by which blocks	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scan operator that makes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index file in order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
blocks of a data	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
data file in sequence	0.0000000000	0.0645161290323	0.0	0.0645161290323	0.0	1	0.0	2.0	False
physical query plan language	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
language is a sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scan operator the sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator the sort scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort scan operator scans	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator scans a relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation r and sorts	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation is already stored	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stored in a sorted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
form and the sorting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorting is also required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ordering attribute no sorting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
separately by the sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
small enough to fit	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	4.0	False
sorting can be sorting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorting can be done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done directly in memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory then external sorting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorting and external sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
external sort merge techniques	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
sort the given record	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
concept in in managing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
physical management of records	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
libraries on on unix	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
template libraries on microsoft	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
libraries on microsoft environments	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
iterator in several places	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
iterator do the iterator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator that that functions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
functions on an operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operates on a hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list or a tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
iterates through each element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
forms the composite operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element and it comprises	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
comprises of um getnext	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element until you reach	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator or the data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data element so iterators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
open the iterator object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performed the next function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
last operator called close	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator called close closes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
control on the object	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
implement the table scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
operator using an iterator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
close which is shown	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation to be stored	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stored in a file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
table to be stored	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
construct initializes two variables	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
block of the relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first tuple in inside	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inside b the getnext	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
getnext function just iterates	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
iterates through this variables	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ultimately for the programm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
programm which is calling	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
calling the table scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stores and the tuples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data stores now tuples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuples can be iterated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
iterated across the files	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
block in the file	0.4197530864	0.0	0.0	0.0	0.0	0.0	3.99765120376	8.0	False
getnext function um performs	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
precisely this um set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exhausted then we increment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
block in the sequence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
file then you return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return no more data	0.4197530864	0.0	0.0	0.0	0.0	0.0	5.99765120376	8.0	False
exhausted in the record	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
condition he has states	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
file that means set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
increment t and return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return the old value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return oldt for close	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returned we already return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return from the getnext	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
close um function performs	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function performs some kinds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data structure were opened	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
iterator function these data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function these data structures	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data structures are closed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function we shall implement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
earlier using the iterator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
functions the open getnext	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
getnext and close assume	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
contained within a file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
file and the file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
organized as a sequence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
make up the file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
open the table scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
initialize a few things	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
open function um initializes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
initializes two different variables	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
record and t points	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple in the block	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
block the getnext function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
getnext function should return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return here the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scan operator should return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first tuple second tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
level we are concerned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return the next tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means we fist copy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple to be return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returned in the getnext	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
close function to clean	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mess we have created	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory we have allocated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
anymore have to freed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the iterator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the bag union	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
remember we have talked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bags rather than sets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
collection of um tuples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
duplicates in the collection	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
multi set a multi	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set a multi set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
union or a bag	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bag that is made	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
contents of one bag	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
multi um multi bag	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bag union or union	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
denoted by the operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performing the disjoint union	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
abstracted away a relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
form being a file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
open and um call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call the getnext function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done with the data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
concerned um both relations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relations are just iterators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point the current relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
current relation dot getnext	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
start or or set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sub sequent getnext operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations you just call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
open the other relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
start um and start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
getnext on that function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
close and s dot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
close when r dot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
programming practice to call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators in our close	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
physical query plan program	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query plan program programming	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
plan program programming language	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements of table scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table scan index scans	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index scans and iterators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
build around these data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
executed inside the database	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inside the database system	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithms for a data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call them sorting based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorting based methods hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
based methods hash based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
methods hash based methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
based methods and index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
methods and index based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
methods um these methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
typically meant are oriented	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
oriented towards um increasing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search in a sorting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method the the relations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scanned using the sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators like say join	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fashion similarly hash based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
similarly hash based methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of a hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function to quickly search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search for whatever tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple or um data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relations an index base	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index base methods resort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
methods resort to index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
resort to index structures	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structures like um trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
trees or balance trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching the the required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
divide algorithms for data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithms for data access	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
based on what kinds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kinds of data access	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
requirements the first requirement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
unary operator that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
query requires or requires	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
contend with one tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
select and project operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
select is called select	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
checked against each tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple in the relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple is being accessed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
full relation unary operators	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
return um something based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
based on or return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of some relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
last kind of operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations are full relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
full relation binary operators	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
operators these are operators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
requires a complete relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two um two relations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two relations to contend	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
theortic operators like union	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators like union intersection	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kinds of um query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
requirements can be meet	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategies in this session	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithm a one pass	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithm is an algorithm	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation um of interest	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
access the relation multiple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
important and many times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assumes that the relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
fit in main memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory into main memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pass algorithm to perform	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scanning through this relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation tuple after tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
perform a unary operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
unary operator and output	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
shown in the diagram	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
iterator and this relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation iterator returns tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returns tuple after tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case this input buffer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
small as one tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory in the input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
input buffer to store	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
store just one tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple so each tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put into the input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
input buffer and checked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
checked against the unary	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator and either discarded	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
answer answer a tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
select in the sql	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
select name from employee	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
employee um or select	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
unique name from employee	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means it it operates	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return the required value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
unary operators is shown	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
shown in the figure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
familiar um table scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
scan iterator which returns	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returns to a tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
buffer now the input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator now this unique	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
output a this tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple into the output	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple into a data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure holding the history	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation has been read	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read a new tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple into the input	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out the name attribute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
attribute we just check	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
check the hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data structure holding history	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
discard this new tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple otherwise we add	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure in the form	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree or a hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
history that is required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose the unary operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator now the groupby	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator can not return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire set of relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire set of tuples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuples in this relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read and the performing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performing grouping is formed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
formed using this data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data structure that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means this space allocated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
allocated to this data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
large enough to hold	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hold the entire relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithms in this session	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
session here we assume	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation can be held	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read can be held	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
held in the data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pass algorithms for relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators now one pass	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategy is vary depending	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read completely into memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory before we start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reading the other relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
makes much more sense	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read the smaller relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
smaller relation into memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithmic strategy for computing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
computing the set union	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
union of two relations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two relations r union	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
explicitly use the word	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bag union that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returning any duplicate entries	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entries in the result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
simple strategy to compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
union s first read	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read s into memory	0.3771790808	0.193548387097	0.0	0.4169294356	0.0	1	5.99588960658	14.0	False
completely using the iterator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
place it into memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of data structure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure like an index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read into to memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
indexed in a data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data structure start reading	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read into memory check	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
duplicates in the output	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation then just output	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
making another implicit assumption	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
multi set that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sets the set union	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator can be performed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performed using the strategy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategy that we outline	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
intersection operator the strategy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategy for the set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
perform the set intersection	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
intersection between r intersection	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
intersection s and assuming	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation we first read	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory and then store	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure or in memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory index or hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index or hash tables	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
access the data elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
efficiently then start reading	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory tuple by tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple using the iterator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exist in s output	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
output buffer otherwise discard	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set difference set difference	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus r because set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
commutative operation now suppose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two relations that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure or a hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tuple of r check	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
side of the difference	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set difference s minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set of all tuples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
output or those tuples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
found a we find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find a matching tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
deleted from the index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure of the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
deleted all common tuples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuples whatever is left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory is the output	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cross product r times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times s cross product	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bigger relation just read	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt need any data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
sequence of memory locations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tuple of r combined	0.0000000000	0.0322580645161	0.0	0.0	0.0	1	0.0	2.0	False
combined with every tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithm for natural join	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
join a natural join	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
join is an equi	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
join on two relations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two relations that equates	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relations that equates attributes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
natural are being subjected	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
natural join that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
common set of attributes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
memory and then index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index um or place	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table or an index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search through the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash now this hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table or the indexing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
attributes that is based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
indexing or the hashing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
based on the based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search for every tuple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
match the two tuples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two tuples and output	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators like say iterator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sort um table scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table scan sort scan	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
scan sort scan etcetera	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
performing relational algebra operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations like r union	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
union s r intersection	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
intersection s select project	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
select project unique groupby	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
constraints of one pass	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pass algorithms one pass	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algorithms one pass algorithms	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fit completely into memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
extra blocks of memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus one in size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
block to to perform	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
extend on correctly estimating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
correctly estimating the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation if a query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
plan in a dbms	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pass algorithm for performing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performing a particular query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query um relational query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relational query relational algebra	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
query relational algebra operation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operation then it depends	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
large part large part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part on the estimate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
estimate of the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size is wrongly estimated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
allocate two few buffers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two few buffers thinking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thinking that the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
unusable the query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hand if we allocate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
allocate too many buffers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thinking that the relation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thrashing where um memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
swapped on to disk	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
obtain a good estimation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
good estimation in order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pass um query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
learnt in this session	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
session we have kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of a scratch	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
important and crucial area	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
crucial area of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
area of data base	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data base management systems	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
systems called a query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stages in query processing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two important intermediate steps	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
intermediate steps in query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
steps in query processing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
session we have concentrated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set of language constructs	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
language constructs that perform	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constructs that perform low	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
perform low level operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
directly on the storage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
physically access um files	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
memory for for reading	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performing any data base	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data base related operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relational constructs in addition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constructs like iterators tables	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
iterators tables scans sort	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
looked at the variety	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variety of one pass	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
physical query plan constructors	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variety of relational algebra	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
algebra operations like select	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations like select project	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
big question of handling	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
question of handling joins	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
joins in in query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
logical um query execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
plans so this brings	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of this session	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
efficient query processing crucial	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
processing crucial for good	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
operations of a database	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
incorrect information can result	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
steps in query execution	0.0	0.0967741935484	0.0	0.153383467812	0.0	2	0.0	0.0	False
heuristics and cost based	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
language that is interpreted	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
executed on the machine	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
scan reading all blocks	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
scan use an index	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
sort scan operator sorts	0.0	0.0	0.0	0.0	0.0	1	0.0	0.0	False
operator sorts a relation	0.0	0.0	0.0	0.0	0.0	1	0.0	0.0	False
scanner it into memory	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
done on an indexed	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
read r in sorted	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
fit in main memory	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
perform sorting after scanning	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
iterators are physical query	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
comprise of three stages	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
open where an iteratable	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
returns the next element	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
"table scan" iterator contd	0.0	0.0645161290323	0.0	0.0322580645161	0.0	1	0.0	0.0	False
algorithms for database access	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
read only one block	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
memory for small relations	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
relations in one pass	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
strategy for nc algorithm	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
pass strategies for binary	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
strategies for binary relation	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
vary between different operators	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
completely stored in memory	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
memory completely and make	0.0	0.129032258065	0.0	0.193548387097	0.0	1	0.0	0.0	False
tuple of r search	0.0	0.161290322581	0.0	0.22470271886	0.0	1	0.0	0.0	False
read into qt completely	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
pules of while reading	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
output all remaining tuples	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
memory completely and store	0.0	0.0645161290323	0.0	0.0645161290323	0.0	1	0.0	0.0	False
balanced tree index structure	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
output if matching tuple	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
pass algorithms are applicable	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
algorithms rely on correctly	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
relation sizes and allocating	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
algorithms may not run	0.0	0.0322580645161	0.0	0.0	0.0	1	0.0	0.0	False
