introduction to problem solving	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem solving and programming	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
solving and programming lecture	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lecture we had talked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talked about the expressions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators we had looked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
conditional and logical operators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators we will continue	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
continue the discussion today	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
discussion today with operators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators which have side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression with the operators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators that are evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
results in a value	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	0.0	2.0	False
result of the evaluation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluation of the expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
variable does nt change	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
today were the evaluation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator can also result	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	0.0	2.0	False
result in a change	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effects and such operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator are called operators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators with side effect	0.0000000000	0.2	0.0	0.105664166715	0.0	2	0.0	2.0	False
familiar operator the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator the assignment operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two operands the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operands the left operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
value has to assigned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assigned and the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side or the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluate the assignment operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator we have defined	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluating such an expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
value of the expression	0.3571428571	0.0666666666667	0.0	0.0	0.0	1	17.9783677483	44.0	False
effect of the evaluating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression e gets evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated to some value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side effect of evaluating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluating the particular expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression and the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value at was obtained	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression thus the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus two lets assume	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression on the right	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	2.99705014749	6.0	False
hand side y minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus two gets evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
results in the value	0.5714285714	0.0	0.0	0.0	0.0	0.0	3.99508357915	10.0	False
expression x is equals	0.4347826087	0.0	0.0	0.0	0.0	0.0	3.99606686332	8.0	False
equals to y minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first evaluate the expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator or the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator has the precedence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
complete list of operator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list of operator precedence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator precedence and associativity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
associate right to left	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	0.0	2.0	False
operators so which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that the subtraction	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
subtraction will be performed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two assignments will happen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happen and the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assignment on the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first because the associativity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
associativity of the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression first y minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus two is evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
minus two is assigned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assigned to the vale	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten and that assigned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variable x the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value that gets assigned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
two if you add	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated and its value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
discarded that the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
discarded so this makes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression has certain side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effects only its value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression as a statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
statement because the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
understand now the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
converts into this statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
statement so either side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side in such case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
discarded but whatever side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effects as a statement	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	0.0	2.0	False
semicolon now this statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
target and the expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression has no side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quote such a statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
statement in a program	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
makes absolutely no difference	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
difference in the working	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
working of the program	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talk about type conversion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
conversion or we move	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
move to the implicit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type conversion in assignment	0.0000000000	0.0666666666667	0.0	0.0	0.0	2	0.0	4.0	False
conversion in assignment expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assignment expression the rules	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rules for type conversion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus etcetera the rule	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type then the operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lower type its value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
promoted or gets converted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
higher type in assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operand always get converted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
converted to the type	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	0.0	4.0	False
type of the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left hand the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hand the left hand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variable where the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluating right hand side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right hand side operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operand must be converted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
general result in loss	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
accuracy for example suppose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assigned five five point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constant literal of floating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
literal of floating point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
higher than the integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
special rule in assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type of the expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
variable on the left	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	0.0	2.0	False
hand side which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that the type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
converted to an integer	0.3921568627	0.0	0.0	0.0	0.0	0.0	3.99508357915	10.0	False
value of five point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point two double value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
double value is converted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer the fractional part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
proper and the resultant	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case what is happening	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happening is the loss	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
information from five point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two the original value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assigned to the integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hand side we happened	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
variable of type simple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of right hand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer if the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bit will get dropped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out and the result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
making such an assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first because the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator associate from right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left and not left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so the division	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first now in division	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operand is of size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size double seven point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
int if you remember	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value five get promote	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give you the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assignment which is carried	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out next the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side has the type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
double and the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happen in this case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
rule for the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value on the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part will be removed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
removed so one point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four will that converted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equal to seven point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size is an integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first assignment y assigned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assignment y assigned rest	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side of this expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated to the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer on the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
float so the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hand suppose the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assignment was x assigned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first now seven point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluate to double value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
double value one point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
float the double value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point four gets converted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
converted to the float	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
float value one point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four and the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression is one point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point four of type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type double of type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
double of type float	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer and the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
float so the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right hand side value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
side value gets converted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer so one point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fractional part is dropped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value one ok lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effects and in fact	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fact can be described	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
terms of the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus equal to star	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
star equal to slash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equal to and percent	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
essentially these combined assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus or multiplication notification	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
multiplication notification are remainder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cases again the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variable and the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
terms of both value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effect as the expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effect is to add	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
replace with subtraction multiplication	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
multiplication division or remainder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
division or remainder operation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operation as the case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two commonly used operators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
increment and decrement operator	0.0000000000	0.0666666666667	0.0	0.0	0.0	2	0.0	2.0	False
operand and the operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
form but the meaning	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	0.0	2.0	False
cases is different prefix	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operand and the postfix	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that the operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators really mean lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variable of type int	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	0.0	2.0	False
effect is to increment	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99705014749	6.0	False
operator in the prefix	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
prefix form the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two is the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
incremented once the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression can be computed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case here the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression so to clarify	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
clarify these operators lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets take some examples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
replace with the minuses	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effect is to decrement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of x minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
clarify this lets assume	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assume that the expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator so the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression have been evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated the same declaration	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
declaration that the expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated it the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assignment statement x assigned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus y the question	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluation of the statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
execution of the statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
increment and one decrement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happening to the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
remain ten because ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eleven and ten minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten minus eleven minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two expression two sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression two sub expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus y get evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated the final value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stands out will vary	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out will vary depending	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two expression is evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated first right note	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
precedence of the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall the c language	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
language does nt satisfy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
two operand is evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first and as turns	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two is the case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case so lets assume	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happen after the evaluation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluation of this expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eleven and the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
remember this is pre	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
computed so the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of this expression	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	1.99705014749	6.0	False
minus y gets computed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten and the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assigned eleven plus ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated to the eleven	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eleven and this expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression is gets evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten so the result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hand suppose minus minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus y was evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated first so indexes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
indexes it will result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated to the result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten the final value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators these two exceptions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exceptions we have noted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order which the operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated this is left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left to the compiler	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that some compiler	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluate the second operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first and some compilers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depending on this order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depending on the order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two operands are evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
means is that depending	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depending on the compiler	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
machine on different compiler	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compiler the same program	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
program may actually give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give a different result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression and these concepts	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator the c language	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated as the matter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fact be left operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operand is always evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first and the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right operand is evaluated	0.0000000000	0.0666666666667	0.0	0.0	0.0	1	0.0	2.0	False
result of the expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first operand the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire expression must evaluate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operand evaluates to false	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effects then those side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
effect will not takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
operand evaluates to true	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operand the entire expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first now the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten this is post	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effect is the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eleven since the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out to be ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten which is non	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operand be not evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire expression will result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
true so which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the evaluation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire expression the result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
results in value ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
true the second operand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
truth over the result	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
incremented in that case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case similarly the order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order of the evaluation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluation of the argument	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
argument for a function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pass parameters for arguments	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
arguments to be functioned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
variable of the type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
double with the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
twenty four the printf	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four the printf statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print two double number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
double number the percent	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
printf an double quantity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quantity the first quantity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quantity is the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order these two operands	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated first which mans	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value f these expression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
root x is computed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
square root of twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
result n the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
output will be twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hand the square root	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
root x has evaluated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose the second parameter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
twenty because the evaluation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt have any side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
side effect x remains	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
effect x remains twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
evaluated again the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four and the side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
increment x to make	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put would be twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators in this lecture	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
body of the precedence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bottom the highest precedence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lecture and the increment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
increment and the decrement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two new unary operators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
arithmetic operations multiplications division	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations multiplications division remainder	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
multiplications division remainder associativity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
remainder associativity is left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right then the addition	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
subtraction again the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right again then equals	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equals and not equals	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assignment and the assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators like equal assignment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assignment plus equal minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equal minus equal star	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus equal star equals	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
program make a note	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part is clearly split	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
executed and the loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop bodies p star	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equal to n minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus one semicolon note	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
note that the star	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operator and this holds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
holds the entire thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out what this program	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing you will find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
caution at the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the lecture	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interesting operators for side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators for side effect	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
start using these operators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operators we will find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elegant in many cases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations is not advice	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expression very very complicated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of any variable	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
expression containing the operator	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
change in the value	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
value of some variable	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
two operands a variable	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
effect is to change	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
expression is the final	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
effect is to set	0.0	0.133333333333	0.0	0.133333333333	0.0	1	0.0	0.0	False
operator has lesser precedence	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
common example is assignment	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
expressions used as statements	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
discarded but the side	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
valid but quite useless	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
expression if the types	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
left and right operands	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
operands are not same;	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
right operand is converted	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
side effects the left	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
effects the left operand	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
operators are similarly defined	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
assume x is variable	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
type int with initial	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
int with initial value	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
value of x depends	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
operatoe is evaluated first	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
evaluated this is left	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
left operand is evaluated	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
operand is evaluated first	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
evaluated only if needed	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
evaluation of function call	0.0	0.0666666666667	0.0	0.0	0.0	2	0.0	0.0	False
side effects can make	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
program compact and elegant	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
overuse of such operators	0.0	0.0666666666667	0.0	0.0	0.0	1	0.0	0.0	False
