class we will talking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talking about abstract data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
abstract data types interfaces	0.0000000000	0.0	1	0.0	0.0	0.0	0.0	2.0	False
types interfaces and exceptions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implemented in java application	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
java application one application	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
application to the analysis	0.0000000000	0.0123456790123	0.0	0.0	0.0	1	0.0	2.0	False
analysis of time series	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talk about global stacks	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stacks do little bit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bit of mortise analysis	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
analysis and then talk	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
virtual machines okay whats	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
whats an abstract data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
semantics of the operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations on those instances	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data types for instances	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talk of two integers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
addition so you understand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two integers in math	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
similarly we ill define	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations on those data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
types and those operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations would be defined	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
signature of the operation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parameters that the operation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
results of those operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations through a set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sum of two integers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
clearer then the kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
essentially of three kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constructor method in java	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method using this operation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operation you can create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talking about sophisticated data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data types this method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lot of work access	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
work access functions functions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements of the data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data type and manipulation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type and manipulation procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
modify the data type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talking about data types	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data types here data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
types here data types	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
types help us identify	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out of those building	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talk at higher level	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
higher level of abstraction	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right we can talk	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talking of in terms	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
terms of integer adding	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer adding to integers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integers we can talk	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
encapsulate the data structure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
organized and the algorithms	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
work on that data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data structures they encapsulate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set as as defined	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose we also add	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
objects which means add	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means add an object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object to the collection	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
collection remove an object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object to that collection	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right we are changing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method insert to insert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set and this method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method has two parameters	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
instance of the set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
result a new set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set which now includes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
similarly this gives removes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two methods for updating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method for creating constructing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constructing in the set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
result of this method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method the return value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value is of type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
behave we could write	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create a new set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
set when i create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so the answer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
asked whether this set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
answer to this operation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
present then the answer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nature of these operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
functionality of these operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure any such thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talked of any code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implement the dynamic set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right when you talking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talking abstract data types	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specification what the instances	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations would be permitted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
permitted on those instances	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
simple abstract data type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
familiar with are queues	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
today okay so skip	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
last in first out	0.0000000000	0.0123456790123	0.0	0.0	0.0	3	0.0	2.0	False
principle what this means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element which is inserted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first to be removed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
removed if i insert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element from this collection	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
collection then the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
last so the operation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element is called pushing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pushing in the operation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
instance stack of trays	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack a tray put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element when you pop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pop of an element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create a stack push	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element o push adds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
push adds this element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data type it inserts	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
top of the stack	0.1255480271	0.0	0.0	0.0	0.0	0.0	15.9948717949	18.0	False
pop is not taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parameter other than abstract	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right it just taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack as the parameter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
remove the top element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
element from the stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	1.99829059829	6.0	False
stack if the stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returns the top element	0.2953586498	0.0	0.0	0.0	0.0	0.0	5.99772079772	8.0	False
differ from pop pop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pop pop also removes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
removes that element top	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty then top doesnt	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
top doesnt not making	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method so size tells	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
understand what six methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talked of push pop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pop new top size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
understand what these methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
axioms which govern behavior	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
behavior of these methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element of the stack	0.5303030303	0.0740740740741	0.0	0.127652469171	0.0	3	4.99772079772	8.0	False
define what the stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack abstract data type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type we have define	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
translate that into code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
translate abstract data type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data type into code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
declare what a class	0.0000000000	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	2.0	False
asscoaited with the class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of the implementation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation of that interface	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
implementation of that class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interface we just slight	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
names of the methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
methods and the parameters	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parameters of those methods	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
write implement that interface	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right write the classes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
classes for that interface	0.0000000000	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	2.0	False
classes your implementation provided	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation provided the meet	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
meet the specification provide	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specification provide the meet	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
meet the interface specification	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
classes in a program	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interface in a program	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
written provided that implementation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
provided that implementation stick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stick to that interface	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation meets this specification	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
meets this specification meets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specification meets the interface	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
program so it helps	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation from the specification	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
programming technique so lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
java has a built	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
built in stack data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
define a stack interface	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
define the various method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of these interface	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
types of the parameters	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
parameters and the return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type of the method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
methods are actually implemented	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interface so your question	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parameter of type object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generic type in java	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
derived from this type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type okay for instance	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method is empty returns	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty returns boolean right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
boolean right just tells	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tells us whether stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element in the stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack so it returns	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returns an it returns	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty then this method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return any any object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object or any value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt return a stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
method which is executed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
executed on this stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack as a parameter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
mechanisms to handle errors	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
conditional or exceptional case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case in the execution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
throw so the java	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
java term is throw	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
flow of control moves	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method to the method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method to the point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point where the method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exceptional happens you delegate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
handling that exceptional case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case upwards you delegate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
upwards you delegate responsibility	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
delegate responsibility of handling	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem of that error	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
error to the procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pizza method which throws	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
throws a stomachache exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ate too much pizza	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stomachache exception this procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception this procedure eatpizza	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thrown we will exist	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exist this method eatpizza	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
statement these dot dot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dot dot dot means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means there are bunch	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
blocks so it depends	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right when you return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return from a procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returning from this procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure here and returning	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
returning from this method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
modified here those modification	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception in this method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method then you enclose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
block so try bracket	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bracket whatever whatever method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception that was raised	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
raised in this method	0.2046783626	0.0	0.0	0.0	0.0	0.0	7.99772079772	8.0	False
skip this catch block	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
statement after the catch	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
catch block which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method because this method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right if this exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
catch block and execute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
statements let you follow	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right if the method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method raises an exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception is getting caught	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
execute whatever statements return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
system a dot out	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
write this catch block	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
meeting now would throw	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception to its parent	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point i am catching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stop with your exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
appearing at your console	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right in this manner	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
manner keep getting propagated	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stops and the exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception is then shown	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
shown to the user	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
print out the statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right and by doing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
instance of this class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
instance with any parameter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so stomachache exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object by um making	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
making this call creating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call creating an object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object of this class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assign um the object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object that is created	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
created by this statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
propagate upward move upward	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thrown then this procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception an its calling	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
calling procedure would throw	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
caught at some point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
console that signifies creating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
signifies creating an object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object so your question	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class followed by brackets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
brackets and some parameters	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
signifying java in java	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
signifies that your creating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object of this kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of this class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
invoking the constructor method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method for this class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put down on side	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
block are a method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
listening for exceptions catching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mention before catch block	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
system dot out dot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dot out dot printline	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exit from the program	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
program when an exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception in any method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
add a throws class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right when we wrote	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
wrote the method epizza	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
epizza we had throws	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
defining a stomachache exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stomach so in java	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method for the class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method here is taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking a single parameter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
super mean its calling	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
calling the super class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception it will propagate	0.0000000000	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	2.0	False
upwards along the chain	0.0000000000	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	2.0	False
constructor of parent class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parent class the class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class from which class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
classes is getting derived	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception is a extending	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
extending run time exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method for the run	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exceptions it can throw	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception followed by catch	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
catch some other exception	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
book for these things	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
back to our stacks	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interface for us stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say the maximum	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of our stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element in the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
out an entire implementation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interface so my implementation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation is called array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack and this statement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
statement says that implementing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementing the stack interface	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
array stack implement stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implement stack by implement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack by implement stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack interface we provide	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
earlier and i set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set a default capacity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
capacity for this stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four otherwise the capacity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
capacity of the stack	0.0000000000	0.037037037037	0.0	0.039134876561	0.0	3	0.0	2.0	False
constant which is value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right s is declared	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array of an object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inside right t equals	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means the top element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element is that location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty t is minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack without any parameters	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
capacity are thousand twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack with some number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number lets say thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack of size thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return how many elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure here this method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of the stack	0.4216867470	0.0	0.0	0.0	0.0	0.0	4.99601139601	14.0	False
first increment then put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object at that location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty then i throw	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
throw a stack empty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception as this recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty then the flow	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty as so stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty if the stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
top element in location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element in location element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location element i decrement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
top element and lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say i set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index at that location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location n at location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location t at location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so at location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
decrement t two thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
top element pop returns	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall i said stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception is a class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
object of this type	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class i am creating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rid of those objects	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lie in your memory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
member of this class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
access the tth element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element of this array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation its very simple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
simple all the operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depend upon the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array in this stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack at that point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bound on the size	0.0000000000	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	2.0	False
right so this upper	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value which is thousand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hand whats size stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack in which case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
allocate very small stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception is the requirement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
requirement of the interface	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
top and the pop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
methods are not defined	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
defined if this stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exception is a artifact	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
artifact of this implementation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stock prices of lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say particular stock	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stock so i give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give you the price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
day zero the price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
day one the price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stock price on day	0.4191616766	0.0	0.0	0.0	0.0	0.0	3.99772079772	8.0	False
day i is defined	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
defined as the maximum	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
maximum number of consecutives	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of consecutives days	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
days that the price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
price of the stock	0.2348993289	0.037037037037	0.0	0.0587023148415	0.0	1	3.99715099715	10.0	False
equal to its price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
clear so the span	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
span of this stock	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equal to the maximum	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
maximum number of days	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
price of this stock	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
equal to this price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four days the price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equal to this days	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
span of stock price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four inclusive of kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind this should make	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right we are counting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
span so i give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give you the stock	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
prices in say array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
prices in this array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
span in an array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus one i minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus two i minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index k will start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
day i the moment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
day i you stop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done is true done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
repeat until the loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop they will exit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
exit repeat until loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equals i which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
determine by the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing this thing computing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thing computing this span	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop can be executed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
worst case i times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class this is executed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total number of times	0.0000000000	0.0	0.0	0.0	0.0	0.0	1.99829059829	6.0	False
statement might get executed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
worst case so question	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall that to compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
prices greater than price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
closest day preceding day	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quantity closet day preceding	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
greater than the price	0.0000000000	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	2.0	False
minus one conventionally lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
span for the price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quantity we can compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute what this span	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the h quantities	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
price on the day	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger than the price	0.0000000000	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	4.0	False
two five six array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array in a stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first compare the price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
day seven with price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bar i have drawn	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
price with the price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall the previous lecture	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done right the index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give my h value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack the the price	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop till either done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done becomes true means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means i have found	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
price but if done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
true and the stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty h is minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop execute whole lot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times this while loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
worst case n square	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements do we pushed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pushed on the stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	3.99829059829	6.0	False
times this loop executed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
executes we are removing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total number of elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
stack so that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of times loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right how many times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times do these statements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
execute exactly n times	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
whats the total number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
executes over all iteration	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
grow this loop move	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop move an element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
move an element stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pushed n elements total	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements total total number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of elements pushed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem with our stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size for this stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create an new array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create a new array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
copy all the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
increment the top counter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
counter and i put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put the new object	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location so the question	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tight strategy for growth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategy for growth strategy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategy we always increment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of the array	0.2147239264	0.0	0.0	0.0	0.0	0.0	9.99601139601	14.0	False
compare these two strategies	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategies is better strategy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
space in the stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element so it takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create a larger stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger stack and copy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
copy the elements form	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
form the earlier stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack and then push	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element so you created	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
copied the n element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stack by c unit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four how this behaves	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right initially i started	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
started with the stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size and the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element came to push	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right and i push	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
push this first element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt need to enlarge	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
stack because have space	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cost me one unit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
push e this stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
copy this four elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total cost becomes cost	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fill this ill create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array of size twelve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
four so iam incrementing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size twelve i copy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
copy this eight elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements then i push	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
push one more element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
finally have this thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four going to call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call phase one size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array is eight phase	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
phase so on right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cost that been curved	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
curved in the procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem here this pound	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pound is a multiplication	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so in phase	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
phase i the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first create an array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
copy the previous array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array then i copy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size eight i copy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements so i copy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements is the cost	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pushes in this phase	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right before the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
phase i am doing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total of n pushes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
phases and total cost	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cost of ith phase	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sum roughly n square	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
square by c square	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
approximately n order square	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order of n square	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
creation under one right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right in which case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right for the purposes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size something you taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quickly through growth strategy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
strategy we are running	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
growth strategy i start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
start with an array	0.0000000000	0.0740740740741	0.0	0.127652469171	0.0	3	0.0	2.0	False
element create an array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element i would double	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array so i create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create an array size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two push this element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
double this array create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array create an array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
regular push ill pushing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
push the fifth element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
element i will double	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so i create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element and then push	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt have to copy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
cost two we copied	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two was the cost	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
cost pushing the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array was one call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call it as face	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call it as phase	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
phase four we call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
phase it the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four it has size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
units of time creating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements left after copied	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total cost of phase	0.0000000000	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	2.0	False
cost of n pushes	0.0000000000	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	4.0	False
earlier by this strategy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stop discussion about stacks	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class we will discuss	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
discuss queues and linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
queues and linked lists	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
abstract data types adts	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
implementation of a stack	0.0	0.0123456790123	0.0	0.0	0.0	3	0.0	0.0	False
stacks in the java	0.0	0.0123456790123	0.0	0.0	0.0	3	0.0	0.0	False
adts is a mathematically	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
set of its instances	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
interface collection of signatures	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
set of axioms preconditions	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
budging blocks of solutions	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
solutions to algorithmic problems	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
talk on a higher	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
adts encapsulate data structures	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
data structures and algorithms	0.0	0.0246913580247	0.0	0.0123456790123	0.0	1	0.0	0.0	False
insert and delete manipulation	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
isin access method method	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
first out lifo principle	0.0	0.0123456790123	0.0	0.0	0.0	3	0.0	0.0	False
objects can be inserted	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
last the most recently	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
object can be removed	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
dispenser as an analogy	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
stack is an adt	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
adt that supports four	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
creates a new stack	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
push adt lemon insert	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
adt lemon insert object	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
adt removes the top	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
removes the top object	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
top object of stack	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
empty an error occurs	0.0	0.0493827160494	0.0	0.0987654320988	0.0	3	0.0	0.0	False
element returns the top	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
returns the top object	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
size adt integer returns	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
integer returns the number	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
boolean indicates if stack	0.0	0.0123456790123	0.0	0.0	0.0	3	0.0	0.0	False
programs we need two	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
constructs interfaces and exceptions	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
interface we just write	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
write down the method	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
names and the parameters	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
parameters what may matters	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
matters is their types	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
actual code the content	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
content of the methods	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
separating interface and implementation	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
stack interface in java	0.0	0.037037037037	0.0	0.0587023148415	0.0	3	0.0	0.0	False
structure is a built	0.0	0.037037037037	0.0	0.0587023148415	0.0	3	0.0	0.0	False
package but we define	0.0	0.037037037037	0.0	0.0587023148415	0.0	3	0.0	0.0	False
define our own stack	0.0	0.037037037037	0.0	0.0587023148415	0.0	3	0.0	0.0	False
pubic object top throws	0.0	0.037037037037	0.0	0.0587023148415	0.0	3	0.0	0.0	False
object top throws stackemptyexception	0.0	0.0617283950617	0.0	0.0859973368477	0.0	3	0.0	0.0	False
public void push object	0.0	0.037037037037	0.0	0.0587023148415	0.0	3	0.0	0.0	False
void push object element	0.0	0.037037037037	0.0	0.0587023148415	0.0	3	0.0	0.0	False
public object pop throws	0.0	0.037037037037	0.0	0.0587023148415	0.0	3	0.0	0.0	False
object pop throws stackemptyexception	0.0	0.0617283950617	0.0	0.0859973368477	0.0	3	0.0	0.0	False
construct useful for handling	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
error or an exceptional	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
exits from the current	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
point of using exceptions	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
delegate upwards the responsibility	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
handling an error delegating	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
error delegating upwards means	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
code who called current	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
public void eatpizza throws	0.0	0.135802469136	0.0	0.427090323289	0.0	1	0.0	0.0	False
calls until the user	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
exceptions in java classes	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
public class stomachacheexception extends	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
pubic stomachacheexception string err	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
based stack an java	0.0	0.0617283950617	0.0	0.114663115797	0.0	3	0.0	0.0	False
stack using an array	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
variable t the index	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
index of the top	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
public class arraystack implements	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
class arraystack implements stack	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
implementation of the stack	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
interface using an array	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
public static final int	0.0	0.037037037037	0.0	0.039134876561	0.0	1	0.0	0.0	False
static final int capacity	0.0	0.037037037037	0.0	0.039134876561	0.0	1	0.0	0.0	False
default capacity of stack	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
private int n maximum	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
int n maximum capacity	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
object s s holds	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
int t the top	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
stack with given capacity	0.0	0.0740740740741	0.0	0.127652469171	0.0	3	0.0	0.0	False
public arraystack int cap	0.0	0.037037037037	0.0	0.039134876561	0.0	3	0.0	0.0	False
based stack in java	0.0	0.0740740740741	0.0	0.127652469171	0.0	3	0.0	0.0	False
public int size return	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
size return the current	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
return the current stack	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
pubic boolean isempty return	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
boolean isempty return true	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
true if the stack	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
pubic void push object	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
void push object obj	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
push object obj throws	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
object obj throws stackfullexception	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
push a new element	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
element on the stack	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
throw new stackfullexception stack	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
public object top throws	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
return the top stack	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
throw new stackemptyexception stack	0.0	0.0493827160494	0.0	0.0987654320988	0.0	3	0.0	0.0	False
stackemptyexception stack is empty	0.0	0.0493827160494	0.0	0.0987654320988	0.0	3	0.0	0.0	False
pubic object pop throws	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
pop off the stack	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
null dereference and decrement	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
dereference and decrement top	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
arraystack initialize the stack	0.0	0.0123456790123	0.0	0.0	0.0	3	0.0	0.0	False
array implementation is simple	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
stack the arbitrary value	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
small for given application	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
empty exception is required	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
price on certain day	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
maximum number consecutive days	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
current day the price	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
equal to ts price	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
day if such day	0.0	0.037037037037	0.0	0.0587023148415	0.0	1	0.0	0.0	False
stack should be updated	0.0	0.037037037037	0.0	0.0587023148415	0.0	3	0.0	0.0	False
growable array based stack	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
array s with larger	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
larger one and continue	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
tight strategy add constant	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
tight vs growth strategies	0.0	0.0123456790123	0.0	0.0	0.0	2	0.0	0.0	False
compare the two strategies	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
regular push operation adds	0.0	0.0123456790123	0.0	0.0	0.0	3	0.0	0.0	False
special push operation create	0.0	0.0123456790123	0.0	0.0	0.0	3	0.0	0.0	False
operation create an array	0.0	0.0123456790123	0.0	0.0	0.0	3	0.0	0.0	False
size copy n elements	0.0	0.0123456790123	0.0	0.0	0.0	1	0.0	0.0	False
cost of a special	0.0	0.0740740740741	0.0	0.127652469171	0.0	3	0.0	0.0	False
performance of the tight	0.0	0.0246913580247	0.0	0.0246913580247	0.0	2	0.0	0.0	False
total cost ot phase	0.0	0.0246913580247	0.0	0.0246913580247	0.0	1	0.0	0.0	False
cost of copying elements	0.0	0.0493827160494	0.0	0.0493827160494	0.0	1	0.0	0.0	False
elements into new array	0.0	0.0493827160494	0.0	0.0493827160494	0.0	1	0.0	0.0	False
performance of the growth	0.0	0.0246913580247	0.0	0.0246913580247	0.0	2	0.0	0.0	False
cost of pushes done	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
done in the phase	0.0	0.0246913580247	0.0	0.0246913580247	0.0	3	0.0	0.0	False
