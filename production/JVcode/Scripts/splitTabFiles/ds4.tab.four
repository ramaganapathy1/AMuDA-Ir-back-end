dictionary abstract data type	0.5223880597	0.0175438596491	0.0	0.0	0.0	1	3.99774774775	8.0	False
binary search is done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done what the analysis	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
analysis for binary searches	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash table how hashing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done see the collision	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class we will follow	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dictionary is an abstract	0.0000000000	0.0877192982456	0.0	0.20367790306	0.0	1	0.0	2.0	False
data type that store	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type that store stores	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number right so bank	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so bank account	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bank account has lots	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
access the bank account	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bank account or data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers so the account	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stores wealth of information	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
address of the account	0.0000000000	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	2.0	False
list of transactions done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements so the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element when we talk	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talk of a element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
account number this helps	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
access the particular information	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
information so any application	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operation on an account	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
provide the account number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
basically an abstract model	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
model of a database	0.0000000000	0.0877192982456	0.0	0.20367790306	0.0	1	0.0	2.0	False
store this key element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
account number for instance	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
instance in the case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose i had student	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key here your entry	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right you have characters	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
characters in your entry	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
uniquely identifies particular student	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
student or particular account	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
account becomes the key	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
operations that is supported	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key find the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key no in settings	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key want to return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search to this wealth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
wealth of data databases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key in my dictionary	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets see my procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure we just return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element okay one thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
require comparison of keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing is searching searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
instance again for student	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
require is comparing keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
comparing keys for equality	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equality right we don	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order on our keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type can be implemented	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementing this abstract data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
instance use an array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
linked list to implement	0.0000000000	0.0	0.0	0.0	0.0	0.0	5.99831081081	6.0	False
inefficient way of doing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
notion of a predecessor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
whats called hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree red black trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
red black trees avl	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
black trees avl trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
avl trees b trees	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data structures to implement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
critical very important data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lectures right in java	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
abstract class called java	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
java that util dot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dot dictionary which lays	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lays of this specification	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interface java dot util	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
java dot util dot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dot util dot map	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specifications are two classes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dictionary dictionary you understand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
understand what the abstract	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys in my databases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
databases and i query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key in this databases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sitting right so index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index of the found	0.0000000000	0.0175438596491	0.0	0.0	0.0	1	0.0	2.0	False
null or or nil	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so five sitting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two so you return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
technique called binary search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary search i imagine	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case going to recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
apply to different problems	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
narrow down the range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching for the query	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sitting in an array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
order increasing or decreasing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
decreasing for binary search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary search to work	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search to work suppose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose i am searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching for an element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
element in this case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fourteen right ill compare	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right ill compare fourteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compare fourteen and twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fourteen so that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lies in this databases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right of the fourteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements are in increasing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two has to lie	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of the array	0.3162650602	0.0	0.0	0.0	0.0	0.0	4.99662162162	12.0	False
search for our element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search for the element	0.4191616766	0.0	0.0	0.0	0.0	0.0	1.99774774775	8.0	False
fourteen we have figure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two in this part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of a array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array once again wee	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
wee have to repeat	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
repeat the same thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
middle element compare twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two with this middle	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
middle element which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
twenty two this part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
middle element we search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search for we compare	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compare this middle element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element twenty two twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger so if twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
write a recursive procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
understand this quickly imagine	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
range want to search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search so procedure call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key which you searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
high basically that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that your invoking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
invoking it something wrong	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element which is obtained	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
check if middle element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
position where you found	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys so you return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search in the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array the left part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array has a staring	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
low and its ending	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ending location mid minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call to that procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search in the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary search small pieces	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
small pieces of code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
write a iterative procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
iterative procedure you understand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array and we doing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out in a loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop right and updating	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
step low becomes mid	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger than the middle	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
middle element the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger then the mid	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element low becomes mid	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
smaller than the mid	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element high become mid	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
high become mid minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key in which case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case we just return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out from this loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop do while loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
questions from this point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two different ways write	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure you can write	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of the problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
halved at every steps	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
range of that items	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search n is halved	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
halved after one comparison	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
range of the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching for my key	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right after logging comparison	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
logging comparison the range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
require log n base	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
comparison can be done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done in one unit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class that is base	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers in that array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers were in decreasing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose you still searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
throw all the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements go throw entire	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
initially at the beginning	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
beginning only of search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
position some other element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
run through the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element in the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ends my aside searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
back to my dictionary	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
asked to implement caller	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implement caller id facility	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
company right various company	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
facility when a call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call comes in based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
based on a phone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number you can figure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
callers name okay lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assume that our phone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers are all digit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers as this case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so the range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
range of phone numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers would be ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus one so hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of different phone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
range his hundred million	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
million may be delhi	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
range which is hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
million because the phone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers are eight digit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers have not put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traverse through this list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
remove an element suppose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element suppose particular person	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
remove that particular data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
record from this list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search first first search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
remove it right searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right searching and removing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching itself taking order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order n time removing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
found were the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire thing an order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order n time inserting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserting why does inserting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
unordered list you don	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
care where you putting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first location yes inserting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location yes inserting takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
good for this application	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
application were you maintain	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kinds of log file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log file for instance	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
transactions are happening database	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
database try to maintain	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem you can figure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out you can revert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
transaction whatever is done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done or for instance	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
instance in your systems	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
track of various activities	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
activities that for taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happening in your system	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
system maintain this maintain	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
maintain this maintain log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
frequently to your file	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
transaction need to add	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
good because insertion takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure used to implement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
abstract the dictionary data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put them in increasing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of direct access	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mechanism into this thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array some such thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log n time inserting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
removing will take order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
maintain the sorted order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location have to shift	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right of the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insertion will take order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order n time inverse	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inverse case similarly deletion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
move it to back	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
back we seen examples	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
examples in previous class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first have to search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search so your question	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array all the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put in an array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
move it once step	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
step to the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
move order n elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements to the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order n plus log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log n is order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching in your searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array of size ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ankur had a phone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array at that location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
corresponds to ankurs phone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right now all operations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create a new phone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
delete a particular phone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location and i remove	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bad with this implementation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation your wasting lot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
wasting lot of space	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out be an issue	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
technique we had hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hundred million phone numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size the hundred million	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array was getting wasted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose i could create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create a smaller array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
million users two locations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations in that array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
small number of users	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fancy so i create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array of five elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number and i compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute and i compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute this value modulo	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four when i compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute this quantity modulo	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four so i put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put ankur at location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four in my array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constant time for insertion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
understand what the idea	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
idea is so lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers but entry numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers are of students	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
students in this class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
right so your entry	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class yeah the range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
range of this numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers is huge right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right this is infact	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size only about hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
people in the class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
spent much more space	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets let me pick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick up a hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
function so this function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
digits of your entry	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten you just pick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
digits of the entry	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table of hundred entries	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entries table of size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table of size hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
person with this entry	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right now the problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert delete and search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation that i showed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem if two elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements are getting mapped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location in our hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
deal with two keys	0.0000000000	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	2.0	False
two keys which mapped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
spot in our hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
today in todays class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first technique simplest technique	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
simplest technique called chain	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements in this hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements in this linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list in this right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function which was computing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
computing which was taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key and computing modulo	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys keep getting mapped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two or more keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mapped to this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key was getting map	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem does it create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
resolve the collision problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right worst case worst	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
worst case worst case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case what might happen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
mapped to one location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
location in this hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location in the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table then your data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reduced to a linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
linked list data structure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case time of order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order n for search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search and delete insert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes in the linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
identity in the phone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number but all data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
delete of an element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
essentially the same thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function h to determine	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two examples of hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
examples of hash functions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
functions in one case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kinds of hash function	0.4191616766	0.0	0.0	0.0	0.0	0.0	3.99774774775	8.0	False
regarded as modulo hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
modulo hundred the reason	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
write modulo hundred hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function to find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
maintain these this list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list in a sorted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sorted order then insertion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the linked	0.4430379747	0.0175438596491	0.0	0.0	0.0	1	2.99718468468	10.0	False
end of linked list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list then you don	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traverse the entire list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list reach the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pointer which always points	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
points to the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert at the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	1.99831081081	6.0	False
suppose want to insert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
front of this linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tail of the linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list use that pointer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element at the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order on your keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements so an element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
store in the slot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function doing the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing the hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function is mapping	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
universe of all keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
slots of the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assume for the rest	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rest of the discussion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the hash function	0.3763440860	0.0	0.0	0.0	0.0	0.0	7.99718468468	10.0	False
arithmetic operation to compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
independent of the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	3.99831081081	6.0	False
choice of hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
good choices of hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function right lot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right lot of research	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function that people	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
simple examples of hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function a good hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
uniformly over the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
map all the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two anything such thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
collisions your data structure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data structure would start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function which distributes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function which distributes things	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so an idea	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element and it lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table of hundred locations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations it will pick	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hundred locations then throw	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of it shows	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
shows every every location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
roughly the same number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function which takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
puts it a random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random location it picked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
picked at that point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assume such a hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assume that hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
takes element and throws	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
uniformly with same probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right we ill call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call this as simple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
factor of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	3.99831081081	6.0	False
divided by the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
size of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
call this load factor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
factor alpha any questions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search is unsuccessful right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
slot in the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
hash table i ran	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ran through the linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
propositional to the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
size of the linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
hash function takes constant	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
step the entire linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
follow pointer by pointer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pointer till you reach	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
limits i have thrown	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thrown in my table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nice hash function simple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function simple hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function simple hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
essentially distributing the things	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list is of size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so the excepted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
excepted number of elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
roughly one plus alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so this tells	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create a bad hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function for which excepted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function at put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thing is getting mapped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
efficiency of this data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
critically on the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class hash function designing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function designing hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function designing hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
design a good hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
principle is behind hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function what kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
make a successful search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
answer for successful search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key computed the value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value the hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
walking through the linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list but i don	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reach till the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
linked list some point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point in the middle	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
traverse in this process	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
database right so lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so lets lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
arguing it but lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose i was searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element which was inserted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right suppose the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element that was inserted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
length of the list	0.0000000000	0.0175438596491	0.0	0.0	0.0	1	0.0	4.0	False
right in the case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case of successful search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
successful search excepted number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of elements examined	0.0000000000	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	4.0	False
inserted when the tenth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tenth element was inserted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
inserted i equals ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
append the element lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
comparisons i have done	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
throw the entire linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserting just to make	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
make sure the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case have to make	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserted at the beginning	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements in my database	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserted then the excepted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserted then the linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
linked list the excepted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list the excepted length	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
length of the linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
list at the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserted roughly i minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right this one lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
roughly the time excepted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
summing this quantity gap	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking the average right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two whenever we doing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing average time computations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
average time to search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right at the beginning	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
average ill take half	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
half half the length	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two so we don	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order one plus alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search we are taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking a similar kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
good choice of alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
alpha was the load	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
slots in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserting the hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash table then alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sense in the excepted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of an ideal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
questions till this point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of our hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table should be start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
concept of growable stack	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so same idea	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
data structures you start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
start with some thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
large that the sizes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sizes of linked list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
move the entire set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire set of element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the new hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
modification to the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
design your hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keeping this in mind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of hash tables	0.0000000000	0.0175438596491	0.0	0.0	0.0	1	5.99831081081	6.0	False
propositional to the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
wont there be space	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
space problem with number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements right it depends	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equal to the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem here this hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thousand this hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash table can accommodate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
accommodate only thousand elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list you can attach	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performances of the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten thousand elements coming	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
average linked list length	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
length would be ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten in which case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
case it make sense	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sense to be move	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger hash table right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thousand and you create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create a hash table	0.0000000000	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	2.0	False
hash table of size	0.0000000000	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	2.0	False
table of size ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
starting very large hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table and having wastage	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
concepts of good hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ways of resolving collision	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
located quickly using keys	0.0	0.0877192982456	0.0	0.20367790306	0.0	1	0.0	0.0	False
dictionary may hold bank	0.0	0.0701754385965	0.0	0.140350877193	0.0	1	0.0	0.0	False
account is an object	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
object that is identified	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
account stores a wealth	0.0	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	0.0	False
including the current balance	0.0	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	0.0	False
deposits and withdrawals performed	0.0	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	0.0	False
application wishing to operate	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
number as a search	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
dictionary stores key element	0.0	0.0877192982456	0.0	0.20367790306	0.0	1	0.0	0.0	False
stores key element pairs	0.0	0.0877192982456	0.0	0.20367790306	0.0	1	0.0	0.0	False
supported bu a dictionary	0.0	0.0877192982456	0.0	0.20367790306	0.0	1	0.0	0.0	False
simple container methods size	0.0	0.0701754385965	0.0	0.140350877193	0.0	1	0.0	0.0	False
container methods size isempty	0.0	0.0	0.0	0	0.0	1	0.0	0.0	False
special element nil returned	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
supporting order methods min,max,successor,predecessor	0.0	0.0	0.0	0.0	0.0	1	0.0	0.0	False
methods min,max,successor,predecessor is row	0.0	0.0	0.0	0.0	0.0	1	0.0	0.0	False
data structure to realize	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
structure to realize dictionaries	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
arrays linked lists inefficient	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
table used in java	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
sequence of numbers index	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
idea divide and conquer	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
conquer a key design	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
narrow down the search	0.0	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	0.0	False
search eange in stages	0.0	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	0.0	False
high then return nil	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
running time of binary	0.0	0.0701754385965	0.0	0.140350877193	0.0	2	0.0	0.0	False
range of candidate items	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
items to be searched	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
halved after each comparison	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
array based implementation access	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
searching in an unsorted	0.0	0.0175438596491	0.0	0.0	0.0	2	0.0	0.0	False
integers q an integer	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
searching in an arbitrary	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
provide caller id capability	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
number return the caller's	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
searching and removing takes	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
applications to log files	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
rare searches and removals	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
inserting and removing takes	0.0	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	0.0	False
rare insertions and removals	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
direct addressing an array	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
addressing an array indexed	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
array indexed by key	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
huge amount of wasted	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
amount of wasted space	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
size of the array	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
ankur into a hashed	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
keys be entry no's	0.0	0.0701754385965	0.0	0.140350877193	0.0	1	0.0	0.0	False
entry no's of students	0.0	0.0701754385965	0.0	0.140350877193	0.0	1	0.0	0.0	False
students in the class	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
function is say last	0.0	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	0.0	False
two keys which hash	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
set up an array	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
links a table indexed	0.0	0.0	0.0	0	0.0	1	0.0	0.0	False
key k is stored	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
hash function h maps	0.0	0.0350877192982	0.0	0.0350877192982	0.0	3	0.0	0.0	False
keys into the slots	0.0	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	0.0	False
slots of hash table	0.0	0.0350877192982	0.0	0.0350877192982	0.0	1	0.0	0.0	False
assume time to compute	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
evenly amongst the slots	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
hash function would pick	0.0	0.0175438596491	0.0	0.0	0.0	3	0.0	0.0	False
searching for a key	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
analysis we will ise	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
ise this simple uniform	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
elements the load factor	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
load factor is defined	0.0	0.0175438596491	0.0	0.0	0.0	3	0.0	0.0	False
simple uniform hashing yields	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
hashing yields an average	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
expected number of elements	0.0	0.0526315789474	0.0	0.0834190789853	0.0	1	0.0	0.0	False
assume the new element	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
case of a successful	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
successful search the expected	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
examined when the sought	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
propotional to the number	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
constant time on average	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
lists are doubly linked	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
educational technology services centre	0.0	0.0526315789474	0.0	0.0556127193235	0.0	1	0.0	0.0	False
indian institute of technology	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
haus khas new delhi	0.0	0.0175438596491	0.0	0.0	0.0	1	0.0	0.0	False
