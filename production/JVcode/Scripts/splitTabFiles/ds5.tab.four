continue our discussion hashing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
resolve collision in hashing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hashing using linked list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list so that method	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
method of collision resolution	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
collision resolution linear probing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probing and double hashing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
discussing what hash functions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
functions what good hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function the function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class it should distribute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
uniformly over the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happen all the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
famous paradox called birthday	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
paradox called birthday paradox	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
students here or thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sitting in this class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
days in the year	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probability that two people	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
days of the year	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
correspond to your slots	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
slots in the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probability that two keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two keys were end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
deal with non integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer keys in fact	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys were telephone numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers we had return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return the telephone numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
telephone numbers this manner	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
treated as an integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt drop this hyphen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
thought as an integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
techniques of converting non	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
converting non integers keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
class were your entry	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key was a non	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
convert in to integers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
digits as the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer keys into integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
map these together make	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
make a hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall a hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash table your hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table your hash code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash code map maps	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer if your keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys already an integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right but this integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of our hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer to the range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mapped to an index	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index of my table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part you will call	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
things one other requirement	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
requirement of hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
index location you understand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten if you recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function which sometimes maps	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mapped to location thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
kind of randomization happening	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert may be mapped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
popular hash code maps	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash code maps recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
maps recall the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall the hash code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
code map the part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key to an integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer so one thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bit pat and interpret	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
type thirty two bits	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bits as an integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer as an number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
real numbers a longer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
longer double real number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
real number which takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eighteen chunks of thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four bytes and add	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer you are working	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the hash code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
map of a string	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
converted to an integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
integer so one possibility	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interpreted as an integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer okay you understand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order is different right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
summing up the ascii	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location so such kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
converts strings character strings	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer so one technique	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
whats called polynomial accumulation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
character of the string	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
polynomial whose coefficient things	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right and that evaluation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compression map to map	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
string or a non	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
polynomial at some integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
experimental stuff so people	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
looked at and found	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirty nine or forty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so this kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
favour of this kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of a hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash code map lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
map given an integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mod m k mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mod m will give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give you some integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer in the range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of the table	0.5021459227	0.0	0.0	0.0	0.0	0.0	4.99543610548	18.0	False
four and you choose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two to the ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	5.99847870183	6.0	False
taking some integer mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bits of that integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking the last bit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bit of the integer	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
taking lets say mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
forgetting the other bits	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer we just taking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking some small set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set of a bits	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bits the last ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
last ten bits basing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
basing our um basing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
basing the hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function on that right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of compression map	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
compression map this simple	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
map this simple compression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick up the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of your hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	4.99847870183	6.0	False
size of the hash	0.4401805869	0.0	0.0	0.0	0.0	0.0	1.99746450304	10.0	False
prime number to give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put in hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of my hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say seven hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right this will assure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assure that if things	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location in my chaining	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick up your size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
close to a power	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
effect its start happening	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of a compression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
preferably a prime number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lot of collisions happening	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happening right and lot	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depends upon the data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depends upon the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right which you follow	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
follow perhaps improve performance	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
essentially first read out	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out the second part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assuming that our keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first use the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
code map to convert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
range zero through max	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
max so first covert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
range through k max	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right first we converted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
converted to this range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key so that corresponds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right as a consequence	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
floor function which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
round it that number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integer okay ill repeat	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of that number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thing that was happening	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done lot of jugglery	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
jugglery taken that number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two then it turns	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
read about more hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nice book by ronald	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
book by ronald kruth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ronald kruth on sorting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching which covers hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
functions in more detail	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
technique for a compression	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
multiply add and divide	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
divide which basically means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers and then compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mapped to same location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of patterns happening	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random right as part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of your programming	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
programming and what random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number in that range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random number random number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number random number generator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
generator use a technique	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
congruential um are based	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
based on the technique	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
technique linear congruential generators	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
seed is an starting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
defined you could provide	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
provide what the seed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
instance your random number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
system time that point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
seed and that seed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number this will give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number in the range	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
last value you return	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right whichever last random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
whichever last random number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
last random number generator	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number so such numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
numbers actually called pseudo	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out all the numbers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
technique called universal hashing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick up a hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys will get mapped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function get mapped	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mapped to few locations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
difficult for me lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say by picking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations in the hash	0.4171122995	0.0	0.0	0.0	0.0	0.0	1.99797160243	8.0	False
lot of time doing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing insertion deletion searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insertion deletion searching right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bunch of hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function lets say fifteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fifteen different hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
randomly pick one hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick one hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys that you give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function to put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function for inserting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserting all my keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so for fro	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fro run of hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
run of hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function i cant change	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
change the hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set of hash function	0.0000000000	0.0238095238095	0.0	0.0	0.0	3	0.0	2.0	False
bad set of keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick up a correction	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
correction of hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
collection of hash functions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
functions this called universal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two keys the probability	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
idea of what universal	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function is concerned	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
last class to resolve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class to resolve collisions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right if many keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location you just put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put a linked list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two other techniques today	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
techniques today which fall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class of open addressing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
questions till this point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
addressing differs from chaining	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fact in open addressing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
open addressing so recalling	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stored in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stored outside the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reference to the starting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element of the linked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
list right the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table was only storing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pointers or they reference	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put all the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
hashing could map elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location in the table	0.4401805869	0.0	0.0	0.0	0.0	0.0	4.99746450304	10.0	False
find some other locations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations for the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements have to reside	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reside in that table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table then the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of my table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
requirement for my chaining	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger than the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table because they elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements were not residing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
residing in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table they were residing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
residing in the nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes which were connected	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
connected which was part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of linked list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt have any element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
elements of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
modifying the hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function little bit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bit so have hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function in mapping	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys set for instance	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parameter which specifies key	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specifies key which probe	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right i will compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of this hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key k comma lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say zeroth probe	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
table if this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
parameter the first parameter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table till i find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find a empty location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location if the operation	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function decide will give	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
determining sequence of slots	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
slots which are examined	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
range of the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys use the set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
set specify us collections	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
require do the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of keys soory	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
soory i should correct	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash table the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert all the hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hundred elements hundred students	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
students of this class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class to a hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table that i create	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
create clearly the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location of hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
technique under open addressing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function h i compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
place of the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
occupied then i increment	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find an empty location	0.0000000000	0.047619047619	0.0	0.047619047619	0.0	1	0.0	4.0	False
location at that point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point i will put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
principle the current location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location what is mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rap around to reach	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table then you start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert you compute value	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute value of hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find the empty location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
references and all right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
place for the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node so that kind	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
slightly slower than chaining	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function is k mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirteen very simple hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash function my keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys k are integers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirteen is my size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location zero to twelve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eighteen what is eighteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eighteen goes to location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem at that point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem forty one forty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
forty one mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
two absolutely no problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
absolutely no problem twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem twenty two twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two twenty two mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
twenty two mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
two goes to location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem at all forty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four forty four mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
forty four mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
forty four this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location but this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty so we put	0.0000000000	0.0	0.0	0.0	0.0	0.0	5.99847870183	6.0	False
four here yeah fifty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fifty nine mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
two thirty two mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirty two mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
forty four is sitting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fifty nine is sitting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sitting at this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two here this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirty one mod thirteen	0.5270270270	0.0	0.0	0.0	0.0	0.0	3.99797160243	8.0	False
location which is occupied	0.4171122995	0.0	0.0	0.0	0.0	0.0	5.99797160243	8.0	False
empty and we put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
put thirty one seventy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
seventy three mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
occupied this location occupied	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location occupied this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right very simple idea	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
idea all the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sitting in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
position of the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two eighteen at location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
forty four at location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
shows you one problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem with this technique	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
technique what is happening	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching for an element	0.0000000000	0.0238095238095	0.0	0.0	0.0	1	0.0	2.0	False
table after we inserted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserted those elements suppose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute k mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt find the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
nt say the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
location if we reach	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reach an empty location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty location then means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations that i checked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose i am searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
find it here suppose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirty three mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty this means thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table because if thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search an unsuccessful search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
terminates when you reach	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reach a empty location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search search will terminate	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search will terminate find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
terminate find the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirty two right thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right thirty two mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirty two mod twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two thirty two found	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two found in location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
removed it by setting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
setting an location null	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location null i remove	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
suppose now you search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
whats going to happen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
happen thirtyone mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thirty one was insert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
null we cant mark	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mark this location empty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
null we will praise	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
marker you could set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
bit at that location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
specifies that this location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location at some point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point this was occupied	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
declare that the search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location thirty one mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
null see a tombstone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find either a null	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
continues when an insert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert encounters a tombstone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element at that position	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
space know one problem	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
problem with this tombstone	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements in the table	0.4171122995	0.0	0.0	0.0	0.0	0.0	3.99797160243	8.0	False
right so your search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performance of your search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
remove all the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
markers in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
slots without the tombstones	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
increase again any questions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
questions still this point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
addressing techniques we looked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
looked at linear probing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
linear probing linear probing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
compute the hash function	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first ill just check	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations specified by probe	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probe and the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probe plus offset probe	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
offset probe is set	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probe plus offset right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nt see the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
linear probing for linear	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probing for linear probing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location so that corresponds	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
corresponds to an offset	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations so then offset	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
offset and this offset	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two so this offset	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
prime then this technique	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
locations of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probing because the offset	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say three units	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
back to the starting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements that you looked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table the other locations	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
offset divides the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number then your offset	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of a thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
thing would never happen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
back at the proof	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rough arguments various cases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
advantages disadvantages linear probing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key your going thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right and that makes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
mod thirteen the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table size twelve size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size twelve size thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means you are continuing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert the first element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first element eighteen eighteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element eighteen eighteen mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eighteen eighteen mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location five yeah forty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location five but location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
forty four eight minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four eight minus forty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus forty four mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four mod eight forty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four so eight minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two go to location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
occupied so i compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
occupied so we compute	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fifteen is two mod	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two that s occupied	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
sixteen sixteen mod thirteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements would be distributed	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
distributed in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
analysis of this technique	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
technique of double hashing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
double hashing so recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hashing so recall assume	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assuming the load factor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
load factor the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
number of elements divided	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
divided by the size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
sense we are talking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talking of a scheme	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements have to sit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sit inside the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inside the hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
similar to the assumptions	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
last class that everytime	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random element the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element the hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hash table uniformly random	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
random element random location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table sorry and put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pick a random location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
random location in hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location in hash table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table try to put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
element their and lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
analyze such a scheme	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
depend upon the hash	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
alpha is a load	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
factor of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
alpha is the load	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
factor then that means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
means that one minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
half of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
empty if one minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fraction of the table	0.5270270270	0.047619047619	0.0	0.047619047619	0.0	1	5.99797160243	8.0	False
means that the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probes will be required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so one minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty yeah ninety percent	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
percent of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tenth of its ten	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
percent of its empty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty so expected number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
expected number of probes	0.0000000000	0.0714285714286	0.0	0.0754744047962	0.0	2	0.0	2.0	False
number of probes required	0.2442588727	0.047619047619	0.0	0.0238095238095	0.0	1	24.990872211	36.0	False
required before i hit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten location one tenth	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tenth one tenth fraction	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
roughly after ten trails	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ten trails ill hit	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hit a empty location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tenth of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sense one over alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
alpha minus probe probes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probe probes are required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hit an empty location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty location and declared	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
excepted numbers of probes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
required for unsuccessful search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talk about the average	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
average number of probes	0.2600000000	0.0	0.0	0.0	0.0	0.0	5.99695740365	12.0	False
successful searches successful search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say i search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probes are required suppose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
required suppose i search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element how many probes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall from last class	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
class the average number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probes required to insert	0.3513513514	0.0714285714286	0.0	0.113211607194	0.0	1	8.99695740365	12.0	False
elements we are doing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
essentially the same thing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert all the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
table is i begin	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two elements right size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
assume m is hundred	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hundred i am talking	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserting the first fifty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inserted forty eight forty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hit a full location	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert this fiftieth element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first forty nine element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probes required for inserting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements i am inserting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total number of probes	0.3513513514	0.0	0.0	0.0	0.0	0.0	10.9969574037	12.0	False
rest you will understand	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets look at suppose	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four element just assume	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert this last element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
require about four probes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching for an empty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty location to put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probes so in fact	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
praises an upper bound	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four probes to insert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
require about eight probes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
four and eight probes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements only three quarters	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
quarters of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
required for this recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
i9s the total require	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
require of these guys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insert after i inserted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty in the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total number of elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two element what part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
part of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two to the minus	0.2943396226	0.0	0.0	0.0	0.0	0.0	7.99797160243	8.0	False
times i so number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
wanted we have load	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
load factor of alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
alpha we already inserted	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
load factor is alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
alpha when the load	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
alpha one minus alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fraction of table empty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
fraction of the probes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
probes of the table	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
empty then i required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log of this quantity	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
quantity minus minus log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus alpha fraction empty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
log of one minus	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
minus i fraction empty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
point one minus alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
average numbers of required	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
required average was divided	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
unsuccessful and successful probes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
alpha recall right probing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
alpha times of log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
power one minus alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lat slide which shows	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
shows how this performances	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
performances is as alpha	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
choose a good hash	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
functions are very rare	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
deal with hashing non	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
hashing non integer keys	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
ways of turning keys	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
turning keys into integers	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
string add up ascii	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
add up ascii values	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
values of the characters	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
hash function on integers	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
mapping of the keys	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
indices of a hash	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
two maps a hash	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
maps a hash code	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
map and a compression	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
requirement of a hash	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
function is to map	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
equal keys to equal	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
keys to equal indices	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
"good" hash function minimizes	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
function minimizes the probablility	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
hash code map key	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
map key > integer	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
popular hash code maps	0.0	0.0952380952381	0.0	0.190476190476	0.0	1	0.0	0.0	False
integer cast for numeric	0.0	0.0714285714286	0.0	0.113211607194	0.0	1	0.0	0.0	False
cast for numeric types	0.0	0.0714285714286	0.0	0.113211607194	0.0	1	0.0	0.0	False
number as an int	0.0	0.0714285714286	0.0	0.113211607194	0.0	1	0.0	0.0	False
component sum for numeric	0.0	0.047619047619	0.0	0.047619047619	0.0	1	0.0	0.0	False
sum for numeric types	0.0	0.047619047619	0.0	0.047619047619	0.0	1	0.0	0.0	False
component sum hash code	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
sum hash code bad	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
polynomial accumulation for strings	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
strings of a natural	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
language combine the character	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
combine the character values	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
values ascii or unicode	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
coefficient of a polynomial	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
computer with horner's rule	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
overflows at a fixed	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
collisions on a vocabulary	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
key m the size	0.0	0.047619047619	0.0	0.0238095238095	0.0	1	0.0	0.0	False
helps ensure uniform distribution	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
primes not too close	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
close to exact powers	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
size of the table	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
choice of a depends	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
charateristics of the data	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
golden ratio fibonacci hashing	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
multiply add and divide	0.0	0.0714285714286	0.0	0.113211607194	0.0	1	0.0	0.0	False
add and divide mad	0.0	0.0714285714286	0.0	0.113211607194	0.0	1	0.0	0.0	False
formula used in linear	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
pseudo random number generators	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
choice of hash function	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
hash function there exists	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
bad set of identifiers	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
malicious adversary could chose	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
adversary could chose keys	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
choose hash function independently	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
function independently of keys!	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
collection h of hash	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
stored in the hash	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
systematically probe table slots	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
sequence of slots examined	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
table is full error	0.0	0.047619047619	0.0	0.0238095238095	0.0	1	0.0	0.0	False
store all those links	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
walk along the table	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
table for a long	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
lookup in linear probing	0.0	0.0238095238095	0.0	0.0	0.0	2	0.0	0.0	False
search for a key	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
continue looking at successive	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
find k or encounter	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
encounter an empty location	0.0	0.047619047619	0.0	0.047619047619	0.0	1	0.0	0.0	False
unsuccessful search to search	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
continue till we encounter	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
deletion in linear probing	0.0	0.119047619048	0.0	0.276420011296	0.0	2	0.0	0.0	False
first searcg for key	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
first search for key	0.0	0.0714285714286	0.0	0.113211607194	0.0	1	0.0	0.0	False
lookup procedure would declare	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
encounters a it ignores	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
continues with next location	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
element at the location	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
position in the table	0.0	0.047619047619	0.0	0.047619047619	0.0	1	0.0	0.0	False
table where we first	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
prime we will eventually	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
distributes keys more uniformly	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
analysis of double hashing	0.0	0.0238095238095	0.0	0.0	0.0	2	0.0	0.0	False
assume that every probe	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
function in the table	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
action of the table	0.0	0.0714285714286	0.0	0.0754744047962	0.0	1	0.0	0.0	False
average no of probes	0.0	0.047619047619	0.0	0.047619047619	0.0	1	0.0	0.0	False
probes for a successful	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
average no if probes	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
insert all the elements	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
probes required to leave	0.0	0.047619047619	0.0	0.047619047619	0.0	1	0.0	0.0	False
probing uses uniform hashing	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
linear probing and double	0.0	0.0238095238095	0.0	0.0	0.0	3	0.0	0.0	False
educational technology services centre	0.0	0.047619047619	0.0	0.047619047619	0.0	1	0.0	0.0	False
indian institute of technology	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
haus khas new delhi	0.0	0.0238095238095	0.0	0.0	0.0	1	0.0	0.0	False
