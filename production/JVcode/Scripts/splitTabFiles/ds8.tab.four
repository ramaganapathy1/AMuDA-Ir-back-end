talking about ordered dictionaries	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ways way of implementing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so recall dictionary	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search for an element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element or to delete	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key element with maximum	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key and the notion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
notion of predecessor successor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order of a keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
hashing when we talked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dictionary if we recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys is to compare	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equality given two keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out of our keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of a ordering	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation of the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
function predecessor and successor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking only one parameter	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys are the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
field all the part	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
ordered on the keys	0.0000000000	0.0434782608696	0.0	0.0	0.0	1	0.0	2.0	False
keys so similarly successor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implement such a ordered	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dictionary so two trivals	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
trivals doing both cases	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list kind of data	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
kind of data structure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
structure so in unordered	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
taking only constant amount	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
amount of time searching	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching will take ordered	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
list before i found	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out the entire elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire elements and deletion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order n not order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dictionary successor of twelve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
twelve is not twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two it is fourteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
twelve in the ordered	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
relation so the ordered	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order on the integers	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
integers yeah so twelve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger than that eighteen	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
eighteen twenty two thirty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire thing to find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key larger than twelve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
twelve yeah both successor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
inefficient implementation an ordered	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
implementation an ordered list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
lets say we ordered	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
total order of keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reference to the end	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
end in this list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
give me the successor	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
successor say predecessor takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node when i asked	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search for the node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
throw this entire list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
entire list to reach	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node in this list	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
constant time right inserting	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right inserting also takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out way to insert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find out the correction	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out the correction position	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
correction position for insertion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insertion okay searching takes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching takes n order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array searching can improve	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right if you put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements they are ordered	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary search to find	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
find out the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element logarithmic time log	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right but binary search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search then now insertion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
deletion still take order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right place to insert	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
shift all the elements	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
elements to the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
insertion similarly for deletion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recap what binary search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary search to search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger the right twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
location which has twenty	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two or an array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
two inch away case	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
make a comparison size	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
size of the array	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
array which you making	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
making the search halves	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
searching as to recall	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
recall insertion and deletion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
questions still this point	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary search binary search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search binary search tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree which has search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary tree binary tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree is a tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
children right a node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child or no children	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
children no children means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out so each node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
talking about the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
interested in the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
written on the nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes are the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sub tree all keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree and this property	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
holds at every node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree which have keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree all the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
keys in the left	0.4561403509	0.0	0.0	0.0	0.0	0.0	2.9941089838	8.0	False
node all the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys in the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	2.99558173785	6.0	False
larger than this node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
similarly for this tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger than this key	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value all the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree nothing to talk	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right sub tree larger	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
larger than seven right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys which satisfies property	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
property so the search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search properties is satisfied	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
clear so binary tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary tree plus search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree plus search property	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
property equals binary search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equals binary search tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree with this keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary satisfy the search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
satisfy the search property	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so keys stored	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys stored left sub	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
stored left sub tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys which two keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dictionaries only in settings	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
settings were the keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
keys are unique right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
unique right an element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key no two keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
setting were two keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right you can define	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
define total order names	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
geographic order alphabetic order	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
settings in which keys	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
rest of the discussion	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
dictionary we are implementing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
out where the element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sub tree we compare	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree we compare eleven	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
done we found eleven	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
find an element key	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key k ill compare	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key in the root	0.4561403509	0.0	0.0	0.0	0.0	0.0	4.9941089838	8.0	False
root then you search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right okay then wee	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left then we compare	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left but the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree of this guy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
sub tree this guy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
write the binary search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
binary search this search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search this search procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search procedure binary search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure binary search tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
root of t lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
equals nil which means	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key in this node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
return the root node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search in the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
left of x doing	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
right so x begin	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
refers to the root	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
root of the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tree and then left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
reference to a left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
root of the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right so its referring	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
key in the node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
version the iterative version	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
calls to the search	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
doing in the search	0.0	0.0	0.0	0.0	0.0	0.0	0.0	0.0	False
tree right we start	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
value of the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
referring to this guy	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right or actually code	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left x right pseudo	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
first it will pointing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
pointing to this node	0.2131147541	0.0	0.0	0.0	0.0	0.0	3.9941089838	8.0	False
node then its pointing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
node and eventually pointing	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
right keep getting modified	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
level in the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
children node child nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes either the left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
child of the node	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
node or the right	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
run of while loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
times this while loop	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
loop executed the maximum	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
executed the maximum number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
maximum number of levels	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
levels in a tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree so the height	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
height of the tree	0.3513513514	0.0869565217391	0.0	0.0434782608696	0.0	3	11.9911634757	12.0	False
right so the height	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
height if the height	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
running time of procedure	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	4.0	False
tree on n nodes	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
situations happens but note	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
note that the height	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
order h the height	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree order the height	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree but the height	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
large has the number	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
nodes in the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
procedure that of finding	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
finding the minimum element	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
element in the tree	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left most tree left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree left most leaf	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
left most leaf left	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
leaf left most leaf	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
search tree so lets	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
tree so lets put	0.0000000000	0.0	0.0	0.0	0.0	0.0	0.0	2.0	False
addition to dictionary functionality	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
array would definitely improve	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
range of canidate terms	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
terms to be searched	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
key with the middle	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
tree is a binary	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
node stores an item	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
stores an item k,e	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
k,e of a dictionary	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
keys stored at nodes	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
nodes in the left	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
stored in the right	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
greater than or equal	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
pseudocode for bst search	0.0	0.0434782608696	0.0	0.0	0.0	2	0.0	0.0	False
running time on tree	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
insertion of n keys	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
running time of searching	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
find the minimum key	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
key n a tree	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
node with the smallest	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
successor is leftmost node	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
node in the right	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
successor is the lowest	0.0	0.0869565217391	0.0	0.0434782608696	0.0	1	0.0	0.0	False
height h the running	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
basic idea is similar	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
running on a tree	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
proportional to the height	0.0	0.0869565217391	0.0	0.0434782608696	0.0	1	0.0	0.0	False
bst insertion pseudo code	0.0	0.0434782608696	0.0	0.0	0.0	2	0.0	0.0	False
bst insertion worst case	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
made to produce bst	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
produce bst of height	0.0	0.0434782608696	0.0	0.0	0.0	1	0.0	0.0	False
